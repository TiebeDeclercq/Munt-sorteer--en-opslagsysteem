
Schuifregister.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000204  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000097b  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000806  00000000  00000000  00000bff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000038a  00000000  00000000  00001405  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  00001790  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043c  00000000  00000000  00001800  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000122  00000000  00000000  00001c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001d5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  8c:	0c 94 bd 00 	jmp	0x17a	; 0x17a <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <shiftInit>:
#define HC595_SH_CP_POS PC3      //Shift Clock (SH_CP) pin location
#define HC595_ST_CP_POS PC4      //Store Clock (ST_CP) pin location
void shiftInit()
{
   //Make the Data(DS), Shift clock (SH_CP), Store Clock (ST_CP) lines output
  HC595_DDR|=((1<<HC595_SH_CP_POS)|(1<<HC595_ST_CP_POS)|(1<<HC595_DS_POS));
  94:	87 b1       	in	r24, 0x07	; 7
  96:	8c 61       	ori	r24, 0x1C	; 28
  98:	87 b9       	out	0x07, r24	; 7
  9a:	08 95       	ret

0000009c <shiftPulse>:

//Sends a clock pulse on SH_CP line
void shiftPulse()
{
   //Pulse the Shift Clock
   HC595_PORT|=(1<<HC595_SH_CP_POS);//HIGH
  9c:	88 b1       	in	r24, 0x08	; 8
  9e:	88 60       	ori	r24, 0x08	; 8
  a0:	88 b9       	out	0x08, r24	; 8
   HC595_PORT&=(~(1<<HC595_SH_CP_POS));//LOW
  a2:	88 b1       	in	r24, 0x08	; 8
  a4:	87 7f       	andi	r24, 0xF7	; 247
  a6:	88 b9       	out	0x08, r24	; 8
  a8:	08 95       	ret

000000aa <shiftLatch>:
}
//Sends a clock pulse on ST_CP line
void shiftLatch()
{
   //Pulse the Store Clock
   HC595_PORT|=(1<<HC595_ST_CP_POS);//HIGH
  aa:	88 b1       	in	r24, 0x08	; 8
  ac:	80 61       	ori	r24, 0x10	; 16
  ae:	88 b9       	out	0x08, r24	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	98 2f       	mov	r25, r24
  b4:	9a 95       	dec	r25
  b6:	f1 f7       	brne	.-4      	; 0xb4 <shiftLatch+0xa>
   _delay_loop_1(1);
   HC595_PORT&=(~(1<<HC595_ST_CP_POS));//LOW
  b8:	98 b1       	in	r25, 0x08	; 8
  ba:	9f 7e       	andi	r25, 0xEF	; 239
  bc:	98 b9       	out	0x08, r25	; 8
  be:	8a 95       	dec	r24
  c0:	f1 f7       	brne	.-4      	; 0xbe <shiftLatch+0x14>
  c2:	08 95       	ret

000000c4 <shiftWrite>:
   The byte is serially transfered to 74HC595
   and then latched. The byte is then available on
   output line Q0 to Q7 of the HC595 IC.
*/
void shiftWrite(uint8_t data)
{
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	d8 2f       	mov	r29, r24
   //Send each 8 bits serially
   //Order is MSB first
   for(uint8_t i=0;i<8;i++)
  ca:	c0 e0       	ldi	r28, 0x00	; 0
  cc:	0d c0       	rjmp	.+26     	; 0xe8 <shiftWrite+0x24>
   {
      //Output the data on DS line according to the
      //Value of MSB
      if(data & 0b10000000)
  ce:	dd 23       	and	r29, r29
  d0:	24 f4       	brge	.+8      	; 0xda <shiftWrite+0x16>
      {
         //MSB is 1 so output high
         HC595DataHigh();
  d2:	88 b1       	in	r24, 0x08	; 8
  d4:	84 60       	ori	r24, 0x04	; 4
  d6:	88 b9       	out	0x08, r24	; 8
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <shiftWrite+0x1c>
      }
      else
      {
         //MSB is 0 so output high
         HC595DataLow();
  da:	88 b1       	in	r24, 0x08	; 8
  dc:	8b 7f       	andi	r24, 0xFB	; 251
  de:	88 b9       	out	0x08, r24	; 8
      }
      shiftPulse();  //Pulse the Clock line
  e0:	0e 94 4e 00 	call	0x9c	; 0x9c <shiftPulse>
      data=data<<1;  //Now bring next bit at MSB position
  e4:	dd 0f       	add	r29, r29
*/
void shiftWrite(uint8_t data)
{
   //Send each 8 bits serially
   //Order is MSB first
   for(uint8_t i=0;i<8;i++)
  e6:	cf 5f       	subi	r28, 0xFF	; 255
  e8:	c8 30       	cpi	r28, 0x08	; 8
  ea:	88 f3       	brcs	.-30     	; 0xce <shiftWrite+0xa>
      shiftPulse();  //Pulse the Clock line
      data=data<<1;  //Now bring next bit at MSB position
   }
   //Now all 8 bits have been transferred to shift register
   //Move them to output latch at one
   shiftLatch();
  ec:	0e 94 55 00 	call	0xaa	; 0xaa <shiftLatch>
}
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <main>:

void main()
{
	//Configure TIMER1

	TCCR1A|=((1<<COM1A1)|(1<<COM1B1)|(1<<WGM11)); //NON Inverted PWM
  f6:	e0 e8       	ldi	r30, 0x80	; 128
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	82 6a       	ori	r24, 0xA2	; 162
  fe:	80 83       	st	Z, r24

	TCCR1B|=((1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10)); //PRESCALER=1 MODE 14(FAST PWM)
 100:	e1 e8       	ldi	r30, 0x81	; 129
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	8b 61       	ori	r24, 0x1B	; 27
 108:	80 83       	st	Z, r24
	
	ICR1=1151; //fPWM=50Hz (Period = 20ms Standard).
 10a:	8f e7       	ldi	r24, 0x7F	; 127
 10c:	94 e0       	ldi	r25, 0x04	; 4
 10e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 112:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>

	DDRD|=((1<<DDRD4)|(1<<DDRD5)); //PWM Pins as Out
 116:	8a b1       	in	r24, 0x0a	; 10
 118:	80 63       	ori	r24, 0x30	; 48
 11a:	8a b9       	out	0x0a, r24	; 10
	
	DDRA &= ((1<<DDRA0)|(1<<DDRA1)|(1<<DDRA2));
 11c:	81 b1       	in	r24, 0x01	; 1
 11e:	87 70       	andi	r24, 0x07	; 7
 120:	81 b9       	out	0x01, r24	; 1
						0b00001000,
						0b00000100,
						0b00000010,
						0b00000001,
                     };
   shiftInit(); //Initialise
 122:	0e 94 4a 00 	call	0x94	; 0x94 <shiftInit>
      /*for(uint8_t i=0;i<8;i++)
      {
         shiftWrite(led[i]);   //Write the data to shift register
         _delay_ms(400);             //Wait
      }*/
	  shiftWrite(0b00000001);   //Write the data to shift register
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	0e 94 62 00 	call	0xc4	; 0xc4 <shiftWrite>
	  if(PINA&(1<<PINA0)){
 12c:	00 9b       	sbis	0x00, 0	; 0
 12e:	fb cf       	rjmp	.-10     	; 0x126 <main+0x30>
		  while(PINA&(1<<PINA0));
 130:	00 99       	sbic	0x00, 0	; 0
 132:	fe cf       	rjmp	.-4      	; 0x130 <main+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 134:	85 ea       	ldi	r24, 0xA5	; 165
 136:	9e e0       	ldi	r25, 0x0E	; 14
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <main+0x42>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <main+0x48>
 13e:	00 00       	nop
		  _delay_ms(15);//dender knop
		  OCR1A=140; //180 graden
 140:	e8 e8       	ldi	r30, 0x88	; 136
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	8c e8       	ldi	r24, 0x8C	; 140
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	91 83       	std	Z+1, r25	; 0x01
 14a:	80 83       	st	Z, r24
 14c:	9f e5       	ldi	r25, 0x5F	; 95
 14e:	2a ee       	ldi	r18, 0xEA	; 234
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	91 50       	subi	r25, 0x01	; 1
 154:	20 40       	sbci	r18, 0x00	; 0
 156:	80 40       	sbci	r24, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <main+0x5c>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <main+0x66>
 15c:	00 00       	nop
		  _delay_ms(300);
		  OCR1A= 25; //0 graden
 15e:	89 e1       	ldi	r24, 0x19	; 25
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	91 83       	std	Z+1, r25	; 0x01
 164:	80 83       	st	Z, r24
 166:	9f e9       	ldi	r25, 0x9F	; 159
 168:	26 e8       	ldi	r18, 0x86	; 134
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	91 50       	subi	r25, 0x01	; 1
 16e:	20 40       	sbci	r18, 0x00	; 0
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	e1 f7       	brne	.-8      	; 0x16c <main+0x76>
 174:	00 c0       	rjmp	.+0      	; 0x176 <main+0x80>
 176:	00 00       	nop
 178:	d6 cf       	rjmp	.-84     	; 0x126 <main+0x30>

0000017a <_exit>:
 17a:	f8 94       	cli

0000017c <__stop_program>:
 17c:	ff cf       	rjmp	.-2      	; 0x17c <__stop_program>
