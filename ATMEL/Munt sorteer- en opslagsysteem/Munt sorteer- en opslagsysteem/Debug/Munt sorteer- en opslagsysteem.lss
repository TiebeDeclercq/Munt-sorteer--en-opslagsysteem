
Munt sorteer- en opslagsysteem.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  000017c6  0000185a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000017c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000037  0080015a  0080015a  000018b4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000018b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001910  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00001950  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ca1  00000000  00000000  00001b58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c77  00000000  00000000  000047f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001422  00000000  00000000  00005470  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005cc  00000000  00000000  00006894  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000aea  00000000  00000000  00006e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001acd  00000000  00000000  0000794a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00009417  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 60 04 	jmp	0x8c0	; 0x8c0 <__vector_4>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 4d 06 	jmp	0xc9a	; 0xc9a <__vector_16>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 7e 08 	jmp	0x10fc	; 0x10fc <__vector_20>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e6 ec       	ldi	r30, 0xC6	; 198
      90:	f7 e1       	ldi	r31, 0x17	; 23
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	aa 35       	cpi	r26, 0x5A	; 90
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	aa e5       	ldi	r26, 0x5A	; 90
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a1 39       	cpi	r26, 0x91	; 145
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 44 02 	call	0x488	; 0x488 <main>
      b2:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <i2c_master_start>:
	}
	
	i2c_master_stop();
	
	return I2C_STATUS_SUCCESS;
}
      ba:	ec eb       	ldi	r30, 0xBC	; 188
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	10 82       	st	Z, r1
      c0:	94 ea       	ldi	r25, 0xA4	; 164
      c2:	90 83       	st	Z, r25
      c4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      c8:	99 23       	and	r25, r25
      ca:	e4 f7       	brge	.-8      	; 0xc4 <i2c_master_start+0xa>
      cc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
      d0:	98 7f       	andi	r25, 0xF8	; 248
      d2:	98 30       	cpi	r25, 0x08	; 8
      d4:	11 f0       	breq	.+4      	; 0xda <i2c_master_start+0x20>
      d6:	90 31       	cpi	r25, 0x10	; 16
      d8:	b1 f4       	brne	.+44     	; 0x106 <i2c_master_start+0x4c>
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	88 0f       	add	r24, r24
      de:	99 1f       	adc	r25, r25
      e0:	86 2b       	or	r24, r22
      e2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      e6:	84 e8       	ldi	r24, 0x84	; 132
      e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      ec:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
      f0:	88 23       	and	r24, r24
      f2:	e4 f7       	brge	.-8      	; 0xec <i2c_master_start+0x32>
      f4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
      f8:	88 7f       	andi	r24, 0xF8	; 248
      fa:	88 31       	cpi	r24, 0x18	; 24
      fc:	31 f0       	breq	.+12     	; 0x10a <i2c_master_start+0x50>
      fe:	80 34       	cpi	r24, 0x40	; 64
     100:	31 f4       	brne	.+12     	; 0x10e <i2c_master_start+0x54>
     102:	80 e0       	ldi	r24, 0x00	; 0
     104:	08 95       	ret
     106:	8a e0       	ldi	r24, 0x0A	; 10
     108:	08 95       	ret
     10a:	80 e0       	ldi	r24, 0x00	; 0
     10c:	08 95       	ret
     10e:	84 e1       	ldi	r24, 0x14	; 20
     110:	08 95       	ret

00000112 <i2c_master_write>:
     112:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     116:	84 e8       	ldi	r24, 0x84	; 132
     118:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     11c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     120:	88 23       	and	r24, r24
     122:	e4 f7       	brge	.-8      	; 0x11c <i2c_master_write+0xa>
     124:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     128:	88 7f       	andi	r24, 0xF8	; 248
     12a:	88 32       	cpi	r24, 0x28	; 40
     12c:	11 f0       	breq	.+4      	; 0x132 <i2c_master_write+0x20>
     12e:	85 e1       	ldi	r24, 0x15	; 21
     130:	08 95       	ret
     132:	80 e0       	ldi	r24, 0x00	; 0
     134:	08 95       	ret

00000136 <i2c_master_stop>:
     136:	84 e9       	ldi	r24, 0x94	; 148
     138:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     13c:	08 95       	ret

0000013e <i2c_master_sendByte>:

uint8_t i2c_master_sendByte(uint8_t address, uint8_t data)
{
     13e:	cf 93       	push	r28
     140:	c6 2f       	mov	r28, r22
	uint8_t status = i2c_master_start(address, I2C_WRITE);
     142:	60 e0       	ldi	r22, 0x00	; 0
     144:	0e 94 5d 00 	call	0xba	; 0xba <i2c_master_start>
	if (status) return status;
     148:	81 11       	cpse	r24, r1
     14a:	08 c0       	rjmp	.+16     	; 0x15c <i2c_master_sendByte+0x1e>

	status = i2c_master_write(data);
     14c:	8c 2f       	mov	r24, r28
     14e:	0e 94 89 00 	call	0x112	; 0x112 <i2c_master_write>
	if (status) return status;
     152:	81 11       	cpse	r24, r1
     154:	03 c0       	rjmp	.+6      	; 0x15c <i2c_master_sendByte+0x1e>

	i2c_master_stop();
     156:	0e 94 9b 00 	call	0x136	; 0x136 <i2c_master_stop>
	
	return I2C_STATUS_SUCCESS;
     15a:	80 e0       	ldi	r24, 0x00	; 0
};
     15c:	cf 91       	pop	r28
     15e:	08 95       	ret

00000160 <lq_transmitI2C>:

	for (i = 0; i < 8; i++) 
	{
		lq_writeDeviceByte(device, charmap[i], LCD_REGISTER_SELECT_BIT);
	}
}
     160:	fc 01       	movw	r30, r24
     162:	23 81       	ldd	r18, Z+3	; 0x03
     164:	62 2b       	or	r22, r18
     166:	80 81       	ld	r24, Z
     168:	0e 94 9f 00 	call	0x13e	; 0x13e <i2c_master_sendByte>
     16c:	08 95       	ret

0000016e <lq_turnOnBacklight>:
     16e:	28 e0       	ldi	r18, 0x08	; 8
     170:	fc 01       	movw	r30, r24
     172:	23 83       	std	Z+3, r18	; 0x03
     174:	60 e0       	ldi	r22, 0x00	; 0
     176:	0e 94 b0 00 	call	0x160	; 0x160 <lq_transmitI2C>
     17a:	08 95       	ret

0000017c <lq_turnOffBacklight>:
     17c:	fc 01       	movw	r30, r24
     17e:	13 82       	std	Z+3, r1	; 0x03
     180:	60 e0       	ldi	r22, 0x00	; 0
     182:	0e 94 b0 00 	call	0x160	; 0x160 <lq_transmitI2C>
     186:	08 95       	ret

00000188 <lq_writeDevicePulse>:
     188:	0f 93       	push	r16
     18a:	1f 93       	push	r17
     18c:	cf 93       	push	r28
     18e:	8c 01       	movw	r16, r24
     190:	c6 2f       	mov	r28, r22
     192:	64 60       	ori	r22, 0x04	; 4
     194:	0e 94 b0 00 	call	0x160	; 0x160 <lq_transmitI2C>
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	8a 95       	dec	r24
     19c:	f1 f7       	brne	.-4      	; 0x19a <lq_writeDevicePulse+0x12>
     19e:	00 c0       	rjmp	.+0      	; 0x1a0 <lq_writeDevicePulse+0x18>
     1a0:	6c 2f       	mov	r22, r28
     1a2:	6b 7f       	andi	r22, 0xFB	; 251
     1a4:	c8 01       	movw	r24, r16
     1a6:	0e 94 b0 00 	call	0x160	; 0x160 <lq_transmitI2C>
     1aa:	8d e3       	ldi	r24, 0x3D	; 61
     1ac:	8a 95       	dec	r24
     1ae:	f1 f7       	brne	.-4      	; 0x1ac <lq_writeDevicePulse+0x24>
     1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <lq_writeDevicePulse+0x2a>
     1b2:	cf 91       	pop	r28
     1b4:	1f 91       	pop	r17
     1b6:	0f 91       	pop	r16
     1b8:	08 95       	ret

000001ba <lq_writeDevice4Bits>:
     1ba:	1f 93       	push	r17
     1bc:	cf 93       	push	r28
     1be:	df 93       	push	r29
     1c0:	ec 01       	movw	r28, r24
     1c2:	16 2f       	mov	r17, r22
     1c4:	0e 94 b0 00 	call	0x160	; 0x160 <lq_transmitI2C>
     1c8:	61 2f       	mov	r22, r17
     1ca:	ce 01       	movw	r24, r28
     1cc:	0e 94 c4 00 	call	0x188	; 0x188 <lq_writeDevicePulse>
     1d0:	df 91       	pop	r29
     1d2:	cf 91       	pop	r28
     1d4:	1f 91       	pop	r17
     1d6:	08 95       	ret

000001d8 <lq_writeDeviceByte>:
     1d8:	ff 92       	push	r15
     1da:	0f 93       	push	r16
     1dc:	1f 93       	push	r17
     1de:	cf 93       	push	r28
     1e0:	df 93       	push	r29
     1e2:	8c 01       	movw	r16, r24
     1e4:	f4 2e       	mov	r15, r20
     1e6:	86 2f       	mov	r24, r22
     1e8:	80 7f       	andi	r24, 0xF0	; 240
     1ea:	90 e1       	ldi	r25, 0x10	; 16
     1ec:	69 9f       	mul	r22, r25
     1ee:	e0 01       	movw	r28, r0
     1f0:	11 24       	eor	r1, r1
     1f2:	68 2f       	mov	r22, r24
     1f4:	64 2b       	or	r22, r20
     1f6:	c8 01       	movw	r24, r16
     1f8:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lq_writeDevice4Bits>
     1fc:	6c 2f       	mov	r22, r28
     1fe:	6f 29       	or	r22, r15
     200:	c8 01       	movw	r24, r16
     202:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lq_writeDevice4Bits>
     206:	df 91       	pop	r29
     208:	cf 91       	pop	r28
     20a:	1f 91       	pop	r17
     20c:	0f 91       	pop	r16
     20e:	ff 90       	pop	r15
     210:	08 95       	ret

00000212 <lq_print>:
     212:	0f 93       	push	r16
     214:	1f 93       	push	r17
     216:	cf 93       	push	r28
     218:	df 93       	push	r29
     21a:	8c 01       	movw	r16, r24
     21c:	eb 01       	movw	r28, r22
     21e:	68 81       	ld	r22, Y
     220:	06 c0       	rjmp	.+12     	; 0x22e <lq_print+0x1c>
     222:	41 e0       	ldi	r20, 0x01	; 1
     224:	c8 01       	movw	r24, r16
     226:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lq_writeDeviceByte>
     22a:	21 96       	adiw	r28, 0x01	; 1
     22c:	68 81       	ld	r22, Y
     22e:	61 11       	cpse	r22, r1
     230:	f8 cf       	rjmp	.-16     	; 0x222 <lq_print+0x10>
     232:	df 91       	pop	r29
     234:	cf 91       	pop	r28
     236:	1f 91       	pop	r17
     238:	0f 91       	pop	r16
     23a:	08 95       	ret

0000023c <lq_sendCommand>:
     23c:	40 e0       	ldi	r20, 0x00	; 0
     23e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <lq_writeDeviceByte>
     242:	08 95       	ret

00000244 <lq_setCursor>:
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
     248:	00 d0       	rcall	.+0      	; 0x24a <lq_setCursor+0x6>
     24a:	00 d0       	rcall	.+0      	; 0x24c <lq_setCursor+0x8>
     24c:	cd b7       	in	r28, 0x3d	; 61
     24e:	de b7       	in	r29, 0x3e	; 62
     250:	19 82       	std	Y+1, r1	; 0x01
     252:	20 e4       	ldi	r18, 0x40	; 64
     254:	2a 83       	std	Y+2, r18	; 0x02
     256:	24 e1       	ldi	r18, 0x14	; 20
     258:	2b 83       	std	Y+3, r18	; 0x03
     25a:	24 e5       	ldi	r18, 0x54	; 84
     25c:	2c 83       	std	Y+4, r18	; 0x04
     25e:	e1 e0       	ldi	r30, 0x01	; 1
     260:	f0 e0       	ldi	r31, 0x00	; 0
     262:	ec 0f       	add	r30, r28
     264:	fd 1f       	adc	r31, r29
     266:	e6 0f       	add	r30, r22
     268:	f1 1d       	adc	r31, r1
     26a:	60 81       	ld	r22, Z
     26c:	64 0f       	add	r22, r20
     26e:	60 68       	ori	r22, 0x80	; 128
     270:	0e 94 1e 01 	call	0x23c	; 0x23c <lq_sendCommand>
     274:	0f 90       	pop	r0
     276:	0f 90       	pop	r0
     278:	0f 90       	pop	r0
     27a:	0f 90       	pop	r0
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <lq_clear>:
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	ec 01       	movw	r28, r24
     288:	61 e0       	ldi	r22, 0x01	; 1
     28a:	0e 94 1e 01 	call	0x23c	; 0x23c <lq_sendCommand>
     28e:	83 e3       	ldi	r24, 0x33	; 51
     290:	97 e0       	ldi	r25, 0x07	; 7
     292:	01 97       	sbiw	r24, 0x01	; 1
     294:	f1 f7       	brne	.-4      	; 0x292 <lq_clear+0x10>
     296:	40 e0       	ldi	r20, 0x00	; 0
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	ce 01       	movw	r24, r28
     29c:	0e 94 22 01 	call	0x244	; 0x244 <lq_setCursor>
     2a0:	df 91       	pop	r29
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <lq_returnHome>:
     2a6:	62 e0       	ldi	r22, 0x02	; 2
     2a8:	0e 94 1e 01 	call	0x23c	; 0x23c <lq_sendCommand>
     2ac:	83 e3       	ldi	r24, 0x33	; 51
     2ae:	97 e0       	ldi	r25, 0x07	; 7
     2b0:	01 97       	sbiw	r24, 0x01	; 1
     2b2:	f1 f7       	brne	.-4      	; 0x2b0 <lq_returnHome+0xa>
     2b4:	08 95       	ret

000002b6 <lq_turnOnDisplay>:
     2b6:	fc 01       	movw	r30, r24
     2b8:	65 81       	ldd	r22, Z+5	; 0x05
     2ba:	26 2f       	mov	r18, r22
     2bc:	24 60       	ori	r18, 0x04	; 4
     2be:	25 83       	std	Z+5, r18	; 0x05
     2c0:	6c 60       	ori	r22, 0x0C	; 12
     2c2:	0e 94 1e 01 	call	0x23c	; 0x23c <lq_sendCommand>
     2c6:	08 95       	ret

000002c8 <lq_turnOffDisplay>:
     2c8:	fc 01       	movw	r30, r24
     2ca:	65 81       	ldd	r22, Z+5	; 0x05
     2cc:	6b 7f       	andi	r22, 0xFB	; 251
     2ce:	65 83       	std	Z+5, r22	; 0x05
     2d0:	68 60       	ori	r22, 0x08	; 8
     2d2:	0e 94 1e 01 	call	0x23c	; 0x23c <lq_sendCommand>
     2d6:	08 95       	ret

000002d8 <lq_init>:
#include <avr/io.h>
#define F_CPU 3686400
#include <util/delay.h>

LiquidCrystalDevice_t lq_init(uint8_t address, uint8_t columns, uint8_t rows, uint8_t dotSize)
{
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	cd b7       	in	r28, 0x3d	; 61
     2de:	de b7       	in	r29, 0x3e	; 62
     2e0:	2e 97       	sbiw	r28, 0x0e	; 14
     2e2:	0f b6       	in	r0, 0x3f	; 63
     2e4:	f8 94       	cli
     2e6:	de bf       	out	0x3e, r29	; 62
     2e8:	0f be       	out	0x3f, r0	; 63
     2ea:	cd bf       	out	0x3d, r28	; 61
	LiquidCrystalDevice_t device;

	device.Address = address;
     2ec:	88 87       	std	Y+8, r24	; 0x08
	device.Columns = columns;
     2ee:	69 87       	std	Y+9, r22	; 0x09
	device.Rows = rows;
     2f0:	4a 87       	std	Y+10, r20	; 0x0a
	device.Backlight = LCD_NOBACKLIGHT;
     2f2:	1b 86       	std	Y+11, r1	; 0x0b
	device.DisplayFunction = LCD_4BITMODE | LCD_1LINE | dotSize;
     2f4:	2c 87       	std	Y+12, r18	; 0x0c
	device.DisplayControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
     2f6:	84 e0       	ldi	r24, 0x04	; 4
     2f8:	8d 87       	std	Y+13, r24	; 0x0d

	// Initialize to default text direction (for roman languages)
	device.DisplayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
     2fa:	82 e0       	ldi	r24, 0x02	; 2
     2fc:	8e 87       	std	Y+14, r24	; 0x0e

	if (rows > 1) {
     2fe:	42 30       	cpi	r20, 0x02	; 2
     300:	18 f0       	brcs	.+6      	; 0x308 <lq_init+0x30>
		device.DisplayFunction |= LCD_2LINE;
     302:	82 2f       	mov	r24, r18
     304:	88 60       	ori	r24, 0x08	; 8
     306:	8c 87       	std	Y+12, r24	; 0x0c
	}

	// for some 1 line displays you can select a 10 pixel high font
	if ((dotSize != 0) && (rows == 1)) {
     308:	22 23       	and	r18, r18
     30a:	29 f0       	breq	.+10     	; 0x316 <lq_init+0x3e>
     30c:	41 30       	cpi	r20, 0x01	; 1
     30e:	19 f4       	brne	.+6      	; 0x316 <lq_init+0x3e>
		device.DisplayFunction |= LCD_5x10DOTS;
     310:	8c 85       	ldd	r24, Y+12	; 0x0c
     312:	84 60       	ori	r24, 0x04	; 4
     314:	8c 87       	std	Y+12, r24	; 0x0c
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     316:	2f ef       	ldi	r18, 0xFF	; 255
     318:	8f e1       	ldi	r24, 0x1F	; 31
     31a:	91 e0       	ldi	r25, 0x01	; 1
     31c:	21 50       	subi	r18, 0x01	; 1
     31e:	80 40       	sbci	r24, 0x00	; 0
     320:	90 40       	sbci	r25, 0x00	; 0
     322:	e1 f7       	brne	.-8      	; 0x31c <lq_init+0x44>
     324:	00 c0       	rjmp	.+0      	; 0x326 <lq_init+0x4e>
     326:	00 00       	nop
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	_delay_ms(100);
	
	// Now we pull both RS and R/W low to begin commands
	lq_transmitI2C(&device, LCD_NOBACKLIGHT);	// reset expanderand turn backlight off (Bit 8 =1)
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	ce 01       	movw	r24, r28
     32c:	08 96       	adiw	r24, 0x08	; 8
     32e:	0e 94 b0 00 	call	0x160	; 0x160 <lq_transmitI2C>
     332:	2f ef       	ldi	r18, 0xFF	; 255
     334:	8f e3       	ldi	r24, 0x3F	; 63
     336:	9b e0       	ldi	r25, 0x0B	; 11
     338:	21 50       	subi	r18, 0x01	; 1
     33a:	80 40       	sbci	r24, 0x00	; 0
     33c:	90 40       	sbci	r25, 0x00	; 0
     33e:	e1 f7       	brne	.-8      	; 0x338 <lq_init+0x60>
     340:	00 c0       	rjmp	.+0      	; 0x342 <lq_init+0x6a>
     342:	00 00       	nop
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46
	
	// we start in 8bit mode, try to set 4 bit mode
	lq_transmitI2C(&device, 0x03 << 4);
     344:	60 e3       	ldi	r22, 0x30	; 48
     346:	ce 01       	movw	r24, r28
     348:	08 96       	adiw	r24, 0x08	; 8
     34a:	0e 94 b0 00 	call	0x160	; 0x160 <lq_transmitI2C>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     34e:	83 e3       	ldi	r24, 0x33	; 51
     350:	90 e1       	ldi	r25, 0x10	; 16
     352:	01 97       	sbiw	r24, 0x01	; 1
     354:	f1 f7       	brne	.-4      	; 0x352 <lq_init+0x7a>
	_delay_us(4500); // wait min 4.1ms
	
	// second try
	lq_writeDevice4Bits(&device, 0x03 << 4);
     356:	60 e3       	ldi	r22, 0x30	; 48
     358:	ce 01       	movw	r24, r28
     35a:	08 96       	adiw	r24, 0x08	; 8
     35c:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lq_writeDevice4Bits>
     360:	83 e3       	ldi	r24, 0x33	; 51
     362:	90 e1       	ldi	r25, 0x10	; 16
     364:	01 97       	sbiw	r24, 0x01	; 1
     366:	f1 f7       	brne	.-4      	; 0x364 <lq_init+0x8c>
	_delay_us(4500); // wait min 4.1ms
	
	// third go!
	lq_writeDevice4Bits(&device, 0x03 << 4);
     368:	60 e3       	ldi	r22, 0x30	; 48
     36a:	ce 01       	movw	r24, r28
     36c:	08 96       	adiw	r24, 0x08	; 8
     36e:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lq_writeDevice4Bits>
     372:	98 eb       	ldi	r25, 0xB8	; 184
     374:	9a 95       	dec	r25
     376:	f1 f7       	brne	.-4      	; 0x374 <lq_init+0x9c>
     378:	00 00       	nop
	_delay_us(150); // wait min 150 mics
	
	// finally, set to 4-bit interface
	lq_writeDevice4Bits(&device, 0x02 << 4);
     37a:	60 e2       	ldi	r22, 0x20	; 32
     37c:	ce 01       	movw	r24, r28
     37e:	08 96       	adiw	r24, 0x08	; 8
     380:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lq_writeDevice4Bits>

	// set # lines, font size, etc.
	lq_sendCommand(&device, LCD_FUNCTIONSET | device.DisplayFunction);
     384:	6c 85       	ldd	r22, Y+12	; 0x0c
     386:	60 62       	ori	r22, 0x20	; 32
     388:	ce 01       	movw	r24, r28
     38a:	08 96       	adiw	r24, 0x08	; 8
     38c:	0e 94 1e 01 	call	0x23c	; 0x23c <lq_sendCommand>
	
	// turn the display on with no cursor or blinking default
	lq_turnOnDisplay(&device);
     390:	ce 01       	movw	r24, r28
     392:	08 96       	adiw	r24, 0x08	; 8
     394:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <lq_turnOnDisplay>
	
	// clear it off
	lq_clear(&device);
     398:	ce 01       	movw	r24, r28
     39a:	08 96       	adiw	r24, 0x08	; 8
     39c:	0e 94 41 01 	call	0x282	; 0x282 <lq_clear>
	
	// set the entry mode
	lq_sendCommand(&device, LCD_ENTRYMODESET | device.DisplayMode);
     3a0:	6e 85       	ldd	r22, Y+14	; 0x0e
     3a2:	64 60       	ori	r22, 0x04	; 4
     3a4:	ce 01       	movw	r24, r28
     3a6:	08 96       	adiw	r24, 0x08	; 8
     3a8:	0e 94 1e 01 	call	0x23c	; 0x23c <lq_sendCommand>
	
	lq_returnHome(&device);
     3ac:	ce 01       	movw	r24, r28
     3ae:	08 96       	adiw	r24, 0x08	; 8
     3b0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <lq_returnHome>

	return device;
     3b4:	87 e0       	ldi	r24, 0x07	; 7
     3b6:	fe 01       	movw	r30, r28
     3b8:	38 96       	adiw	r30, 0x08	; 8
     3ba:	de 01       	movw	r26, r28
     3bc:	11 96       	adiw	r26, 0x01	; 1
     3be:	01 90       	ld	r0, Z+
     3c0:	0d 92       	st	X+, r0
     3c2:	8a 95       	dec	r24
     3c4:	e1 f7       	brne	.-8      	; 0x3be <lq_init+0xe6>
     3c6:	29 81       	ldd	r18, Y+1	; 0x01
     3c8:	3a 81       	ldd	r19, Y+2	; 0x02
     3ca:	4b 81       	ldd	r20, Y+3	; 0x03
     3cc:	5c 81       	ldd	r21, Y+4	; 0x04
     3ce:	6d 81       	ldd	r22, Y+5	; 0x05
     3d0:	7e 81       	ldd	r23, Y+6	; 0x06
};
     3d2:	8f 81       	ldd	r24, Y+7	; 0x07
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	2e 96       	adiw	r28, 0x0e	; 14
     3d8:	0f b6       	in	r0, 0x3f	; 63
     3da:	f8 94       	cli
     3dc:	de bf       	out	0x3e, r29	; 62
     3de:	0f be       	out	0x3f, r0	; 63
     3e0:	cd bf       	out	0x3d, r28	; 61
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	08 95       	ret

000003e8 <timer_Init>:
}

//Buzzer stoppen
void timerBuzzer_Stop(void){
	TCCR0B &= ~(1<<CS00);
	TCCR0B &= ~(1<<CS02);
     3e8:	84 b5       	in	r24, 0x24	; 36
     3ea:	82 60       	ori	r24, 0x02	; 2
     3ec:	84 bd       	out	0x24, r24	; 36
     3ee:	ee e6       	ldi	r30, 0x6E	; 110
     3f0:	f0 e0       	ldi	r31, 0x00	; 0
     3f2:	80 81       	ld	r24, Z
     3f4:	82 60       	ori	r24, 0x02	; 2
     3f6:	80 83       	st	Z, r24
     3f8:	88 e0       	ldi	r24, 0x08	; 8
     3fa:	87 bd       	out	0x27, r24	; 39
     3fc:	85 b3       	in	r24, 0x15	; 21
     3fe:	82 60       	ori	r24, 0x02	; 2
     400:	85 bb       	out	0x15, r24	; 21
     402:	84 b5       	in	r24, 0x24	; 36
     404:	80 64       	ori	r24, 0x40	; 64
     406:	84 bd       	out	0x24, r24	; 36
     408:	08 95       	ret

0000040a <timerBuzzer_Start>:
     40a:	85 b5       	in	r24, 0x25	; 37
     40c:	81 60       	ori	r24, 0x01	; 1
     40e:	85 bd       	out	0x25, r24	; 37
     410:	85 b5       	in	r24, 0x25	; 37
     412:	84 60       	ori	r24, 0x04	; 4
     414:	85 bd       	out	0x25, r24	; 37
     416:	08 95       	ret

00000418 <buzzer>:
     418:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <__data_end>
     41c:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <__data_end+0x1>
     420:	89 2b       	or	r24, r25
     422:	29 f0       	breq	.+10     	; 0x42e <buzzer+0x16>
     424:	88 b1       	in	r24, 0x08	; 8
     426:	80 62       	ori	r24, 0x20	; 32
     428:	88 b9       	out	0x08, r24	; 8
     42a:	0e 94 05 02 	call	0x40a	; 0x40a <timerBuzzer_Start>
     42e:	08 95       	ret

00000430 <servo_Init>:
}

//Initialisatie van de servo
void servo_Init(void){
	TCCR1A|=((1<<COM1A1)|(1<<COM1B1)|(1<<WGM11)); //NON Inverted PWM
     430:	e0 e8       	ldi	r30, 0x80	; 128
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	82 6a       	ori	r24, 0xA2	; 162
     438:	80 83       	st	Z, r24
	TCCR1B|=((1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10)); //PRESCALER=1 MODE 14(FAST PWM)
     43a:	e1 e8       	ldi	r30, 0x81	; 129
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	80 81       	ld	r24, Z
     440:	8b 61       	ori	r24, 0x1B	; 27
     442:	80 83       	st	Z, r24
	ICR1=1151; //20ms periode
     444:	8f e7       	ldi	r24, 0x7F	; 127
     446:	94 e0       	ldi	r25, 0x04	; 4
     448:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     44c:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
	DDRD|=((1<<DDRD4)|(1<<DDRD5)); //PWM Pins as Out
     450:	8a b1       	in	r24, 0x0a	; 10
     452:	80 63       	ori	r24, 0x30	; 48
     454:	8a b9       	out	0x0a, r24	; 10
     456:	08 95       	ret

00000458 <USART_Init>:
}

//Initialisatie van de communicatie
void USART_Init(void){
	UBRR0 = 23; //BAUD RATE VAN 9600
     458:	87 e1       	ldi	r24, 0x17	; 23
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     460:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0C |= ((1<<UCSZ01)|(1<<UCSZ00)); //8 databits
     464:	e2 ec       	ldi	r30, 0xC2	; 194
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	80 81       	ld	r24, Z
     46a:	86 60       	ori	r24, 0x06	; 6
     46c:	80 83       	st	Z, r24
	UCSR0B |= ((1<<RXEN0)|(1<<TXEN0)); //8 databits
     46e:	e1 ec       	ldi	r30, 0xC1	; 193
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	80 81       	ld	r24, Z
     474:	88 61       	ori	r24, 0x18	; 24
     476:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXCIE0); //Interrupt bij ontvangen
     478:	80 81       	ld	r24, Z
     47a:	80 68       	ori	r24, 0x80	; 128
     47c:	80 83       	st	Z, r24
     47e:	08 95       	ret

00000480 <shift_Init>:
}

//Initialisatie van het schuifregister
void shift_Init(void){
	//Make the Data(DS), Shift clock (SH_CP), Store Clock (ST_CP) lines output
	HC595_DDR|=((1<<HC595_SH_CP_POS)|(1<<HC595_ST_CP_POS)|(1<<HC595_DS_POS));
     480:	87 b1       	in	r24, 0x07	; 7
     482:	8c 61       	ori	r24, 0x1C	; 28
     484:	87 b9       	out	0x07, r24	; 7
     486:	08 95       	ret

00000488 <main>:

LiquidCrystalDevice_t device;

int main(void)
{
	DDRA = 0; //Volledig poort a zijn knoppen
     488:	11 b8       	out	0x01, r1	; 1
	
	servo_Init();//Init servo
     48a:	0e 94 18 02 	call	0x430	; 0x430 <servo_Init>
	shift_Init(); //Init schuifregister
     48e:	0e 94 40 02 	call	0x480	; 0x480 <shift_Init>
	USART_Init(); //Init communicatie
     492:	0e 94 2c 02 	call	0x458	; 0x458 <USART_Init>
	timer_Init();
     496:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <timer_Init>
	
	device = lq_init(0x27, 16, 2, LCD_5x8DOTS); // intialize 2-lines display
     49a:	20 e0       	ldi	r18, 0x00	; 0
     49c:	42 e0       	ldi	r20, 0x02	; 2
     49e:	60 e1       	ldi	r22, 0x10	; 16
     4a0:	87 e2       	ldi	r24, 0x27	; 39
     4a2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <lq_init>
     4a6:	20 93 8a 01 	sts	0x018A, r18	; 0x80018a <device>
     4aa:	30 93 8b 01 	sts	0x018B, r19	; 0x80018b <device+0x1>
     4ae:	40 93 8c 01 	sts	0x018C, r20	; 0x80018c <device+0x2>
     4b2:	50 93 8d 01 	sts	0x018D, r21	; 0x80018d <device+0x3>
     4b6:	60 93 8e 01 	sts	0x018E, r22	; 0x80018e <device+0x4>
     4ba:	70 93 8f 01 	sts	0x018F, r23	; 0x80018f <device+0x5>
     4be:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <device+0x6>
	//lq_turnOnBacklight(&device); // simply turning on the backlight
	lq_print(&device, "GIP");
     4c2:	62 e0       	ldi	r22, 0x02	; 2
     4c4:	71 e0       	ldi	r23, 0x01	; 1
     4c6:	8a e8       	ldi	r24, 0x8A	; 138
     4c8:	91 e0       	ldi	r25, 0x01	; 1
     4ca:	0e 94 09 01 	call	0x212	; 0x212 <lq_print>
	lq_setCursor(&device, 1, 0); // moving cursor to the next line	
     4ce:	40 e0       	ldi	r20, 0x00	; 0
     4d0:	61 e0       	ldi	r22, 0x01	; 1
     4d2:	8a e8       	ldi	r24, 0x8A	; 138
     4d4:	91 e0       	ldi	r25, 0x01	; 1
     4d6:	0e 94 22 01 	call	0x244	; 0x244 <lq_setCursor>
	lq_print(&device, "Tiebe Declercq");
     4da:	66 e0       	ldi	r22, 0x06	; 6
     4dc:	71 e0       	ldi	r23, 0x01	; 1
     4de:	8a e8       	ldi	r24, 0x8A	; 138
     4e0:	91 e0       	ldi	r25, 0x01	; 1
     4e2:	0e 94 09 01 	call	0x212	; 0x212 <lq_print>
	
	sei();
     4e6:	78 94       	sei
	
	PCICR |= (1<<PCIE0);
     4e8:	e8 e6       	ldi	r30, 0x68	; 104
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	80 81       	ld	r24, Z
     4ee:	81 60       	ori	r24, 0x01	; 1
     4f0:	80 83       	st	Z, r24
	PCMSK0 |= ((1<<PCINT0)|(1<<PCINT1)|(1<<PCINT3)|(1<<PCINT4)|(1<<PCINT5)|(1<<PCINT6));
     4f2:	eb e6       	ldi	r30, 0x6B	; 107
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	80 81       	ld	r24, Z
     4f8:	8b 67       	ori	r24, 0x7B	; 123
     4fa:	80 83       	st	Z, r24
	
	DDRC |= (1<<DDRC5);
     4fc:	87 b1       	in	r24, 0x07	; 7
     4fe:	80 62       	ori	r24, 0x20	; 32
     500:	87 b9       	out	0x07, r24	; 7
     502:	ff cf       	rjmp	.-2      	; 0x502 <main+0x7a>

00000504 <shiftPulse>:

//Sends a clock pulse on SH_CP line
void shiftPulse()
{
	//Pulse the Shift Clock
	HC595_PORT|=(1<<HC595_SH_CP_POS);//HIGH
     504:	88 b1       	in	r24, 0x08	; 8
     506:	80 61       	ori	r24, 0x10	; 16
     508:	88 b9       	out	0x08, r24	; 8
	HC595_PORT&=(~(1<<HC595_SH_CP_POS));//LOW
     50a:	88 b1       	in	r24, 0x08	; 8
     50c:	8f 7e       	andi	r24, 0xEF	; 239
     50e:	88 b9       	out	0x08, r24	; 8
     510:	08 95       	ret

00000512 <shiftLatch>:

//Sends a clock pulse on ST_CP line
void shiftLatch()
{
	//Pulse the Store Clock
	HC595_PORT|=(1<<HC595_ST_CP_POS);//HIGH
     512:	88 b1       	in	r24, 0x08	; 8
     514:	88 60       	ori	r24, 0x08	; 8
     516:	88 b9       	out	0x08, r24	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     518:	81 e0       	ldi	r24, 0x01	; 1
     51a:	98 2f       	mov	r25, r24
     51c:	9a 95       	dec	r25
     51e:	f1 f7       	brne	.-4      	; 0x51c <shiftLatch+0xa>
	_delay_loop_1(1);
	HC595_PORT&=(~(1<<HC595_ST_CP_POS));//LOW
     520:	98 b1       	in	r25, 0x08	; 8
     522:	97 7f       	andi	r25, 0xF7	; 247
     524:	98 b9       	out	0x08, r25	; 8
     526:	8a 95       	dec	r24
     528:	f1 f7       	brne	.-4      	; 0x526 <shiftLatch+0x14>
     52a:	08 95       	ret

0000052c <shiftWrite>:
	_delay_loop_1(1);
}

void shiftWrite(uint8_t data)
{
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	d8 2f       	mov	r29, r24
	//Send each 8 bits serially
	//Order is MSB first
	for(uint8_t i=0;i<8;i++)
     532:	c0 e0       	ldi	r28, 0x00	; 0
     534:	0d c0       	rjmp	.+26     	; 0x550 <shiftWrite+0x24>
	{
		//Output the data on DS line according to the
		//Value of MSB
		if(data & 0b10000000)
     536:	dd 23       	and	r29, r29
     538:	24 f4       	brge	.+8      	; 0x542 <shiftWrite+0x16>
		{
			//MSB is 1 so output high
			HC595DataHigh();
     53a:	88 b1       	in	r24, 0x08	; 8
     53c:	84 60       	ori	r24, 0x04	; 4
     53e:	88 b9       	out	0x08, r24	; 8
     540:	03 c0       	rjmp	.+6      	; 0x548 <shiftWrite+0x1c>
		}
		else
		{
			//MSB is 0 so output high
			HC595DataLow();
     542:	88 b1       	in	r24, 0x08	; 8
     544:	8b 7f       	andi	r24, 0xFB	; 251
     546:	88 b9       	out	0x08, r24	; 8
		}
		shiftPulse();  //Pulse the Clock line
     548:	0e 94 82 02 	call	0x504	; 0x504 <shiftPulse>
		data=data<<1;  //Now bring next bit at MSB position
     54c:	dd 0f       	add	r29, r29

void shiftWrite(uint8_t data)
{
	//Send each 8 bits serially
	//Order is MSB first
	for(uint8_t i=0;i<8;i++)
     54e:	cf 5f       	subi	r28, 0xFF	; 255
     550:	c8 30       	cpi	r28, 0x08	; 8
     552:	88 f3       	brcs	.-30     	; 0x536 <shiftWrite+0xa>
		shiftPulse();  //Pulse the Clock line
		data=data<<1;  //Now bring next bit at MSB position
	}
	//Now all 8 bits have been transferred to shift register
	//Move them to output latch at one
	shiftLatch();
     554:	0e 94 89 02 	call	0x512	; 0x512 <shiftLatch>
}
     558:	df 91       	pop	r29
     55a:	cf 91       	pop	r28
     55c:	08 95       	ret

0000055e <USART_Transmit_Char>:

//Een char serieel versturen
void USART_Transmit_Char(unsigned char data){
	//Wacht tot de transmit buffer leeg is
	while(!(UCSR0A&(1<<UDRE0))); //Wachten tot UDRE0 == 1
     55e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     562:	95 ff       	sbrs	r25, 5
     564:	fc cf       	rjmp	.-8      	; 0x55e <USART_Transmit_Char>
	UDR0 = data;
     566:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     56a:	08 95       	ret

0000056c <USART_Transmit_String>:
}

//Een string serieel versturen
void USART_Transmit_String(char s[]){
     56c:	0f 93       	push	r16
     56e:	1f 93       	push	r17
     570:	cf 93       	push	r28
     572:	df 93       	push	r29
     574:	8c 01       	movw	r16, r24
	int i = 0;
     576:	c0 e0       	ldi	r28, 0x00	; 0
     578:	d0 e0       	ldi	r29, 0x00	; 0
	while(i < 64){
     57a:	09 c0       	rjmp	.+18     	; 0x58e <USART_Transmit_String+0x22>
		if(s[i] == '\0') break;
     57c:	f8 01       	movw	r30, r16
     57e:	ec 0f       	add	r30, r28
     580:	fd 1f       	adc	r31, r29
     582:	80 81       	ld	r24, Z
     584:	88 23       	and	r24, r24
     586:	31 f0       	breq	.+12     	; 0x594 <USART_Transmit_String+0x28>
		USART_Transmit_Char(s[i++]);
     588:	21 96       	adiw	r28, 0x01	; 1
     58a:	0e 94 af 02 	call	0x55e	; 0x55e <USART_Transmit_Char>
}

//Een string serieel versturen
void USART_Transmit_String(char s[]){
	int i = 0;
	while(i < 64){
     58e:	c0 34       	cpi	r28, 0x40	; 64
     590:	d1 05       	cpc	r29, r1
     592:	a4 f3       	brlt	.-24     	; 0x57c <USART_Transmit_String+0x10>
		if(s[i] == '\0') break;
		USART_Transmit_Char(s[i++]);
	}
}
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	1f 91       	pop	r17
     59a:	0f 91       	pop	r16
     59c:	08 95       	ret

0000059e <geld_Uitwerpen>:
	// Format the result as a string with the Euro sign
	char resultString[20];  // Adjust the size based on your needs
}

//Het uitwerpen van een enkel muntstuk
void geld_Uitwerpen(int geldBedrag){
     59e:	0f 93       	push	r16
     5a0:	1f 93       	push	r17
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	64 97       	sbiw	r28, 0x14	; 20
     5ac:	0f b6       	in	r0, 0x3f	; 63
     5ae:	f8 94       	cli
     5b0:	de bf       	out	0x3e, r29	; 62
     5b2:	0f be       	out	0x3f, r0	; 63
     5b4:	cd bf       	out	0x3d, r28	; 61
	switch(geldBedrag){
     5b6:	8a 30       	cpi	r24, 0x0A	; 10
     5b8:	91 05       	cpc	r25, r1
     5ba:	c9 f0       	breq	.+50     	; 0x5ee <geld_Uitwerpen+0x50>
     5bc:	5c f4       	brge	.+22     	; 0x5d4 <geld_Uitwerpen+0x36>
     5be:	82 30       	cpi	r24, 0x02	; 2
     5c0:	91 05       	cpc	r25, r1
     5c2:	09 f4       	brne	.+2      	; 0x5c6 <geld_Uitwerpen+0x28>
     5c4:	c3 c0       	rjmp	.+390    	; 0x74c <geld_Uitwerpen+0x1ae>
     5c6:	85 30       	cpi	r24, 0x05	; 5
     5c8:	91 05       	cpc	r25, r1
     5ca:	a1 f1       	breq	.+104    	; 0x634 <geld_Uitwerpen+0x96>
     5cc:	01 97       	sbiw	r24, 0x01	; 1
     5ce:	09 f0       	breq	.+2      	; 0x5d2 <geld_Uitwerpen+0x34>
     5d0:	e3 c0       	rjmp	.+454    	; 0x798 <geld_Uitwerpen+0x1fa>
     5d2:	76 c0       	rjmp	.+236    	; 0x6c0 <geld_Uitwerpen+0x122>
     5d4:	82 33       	cpi	r24, 0x32	; 50
     5d6:	91 05       	cpc	r25, r1
     5d8:	09 f4       	brne	.+2      	; 0x5dc <geld_Uitwerpen+0x3e>
     5da:	95 c0       	rjmp	.+298    	; 0x706 <geld_Uitwerpen+0x168>
     5dc:	81 38       	cpi	r24, 0x81	; 129
     5de:	21 e0       	ldi	r18, 0x01	; 1
     5e0:	92 07       	cpc	r25, r18
     5e2:	09 f4       	brne	.+2      	; 0x5e6 <geld_Uitwerpen+0x48>
     5e4:	d6 c0       	rjmp	.+428    	; 0x792 <geld_Uitwerpen+0x1f4>
     5e6:	44 97       	sbiw	r24, 0x14	; 20
     5e8:	09 f0       	breq	.+2      	; 0x5ec <geld_Uitwerpen+0x4e>
     5ea:	d6 c0       	rjmp	.+428    	; 0x798 <geld_Uitwerpen+0x1fa>
     5ec:	46 c0       	rjmp	.+140    	; 0x67a <geld_Uitwerpen+0xdc>
		case 10:
			shiftWrite(0b00000001);
     5ee:	81 e0       	ldi	r24, 0x01	; 1
     5f0:	0e 94 96 02 	call	0x52c	; 0x52c <shiftWrite>
			aantal10cent--;
     5f4:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <aantal10cent>
     5f8:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <aantal10cent+0x1>
     5fc:	01 97       	sbiw	r24, 0x01	; 1
     5fe:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <aantal10cent+0x1>
     602:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <aantal10cent>
			char final_string_10c[20];
			sprintf(final_string_10c, "O10c%d\n", aantal10cent);
     606:	9f 93       	push	r25
     608:	8f 93       	push	r24
     60a:	85 e1       	ldi	r24, 0x15	; 21
     60c:	91 e0       	ldi	r25, 0x01	; 1
     60e:	9f 93       	push	r25
     610:	8f 93       	push	r24
     612:	8e 01       	movw	r16, r28
     614:	0f 5f       	subi	r16, 0xFF	; 255
     616:	1f 4f       	sbci	r17, 0xFF	; 255
     618:	1f 93       	push	r17
     61a:	0f 93       	push	r16
     61c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
			USART_Transmit_String(final_string_10c);
     620:	c8 01       	movw	r24, r16
     622:	0e 94 b6 02 	call	0x56c	; 0x56c <USART_Transmit_String>
		break;
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	0f 90       	pop	r0
     632:	b2 c0       	rjmp	.+356    	; 0x798 <geld_Uitwerpen+0x1fa>
		case 5:
			shiftWrite(0b00000010);
     634:	82 e0       	ldi	r24, 0x02	; 2
     636:	0e 94 96 02 	call	0x52c	; 0x52c <shiftWrite>
			aantal5cent--;
     63a:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <aantal5cent>
     63e:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <aantal5cent+0x1>
     642:	01 97       	sbiw	r24, 0x01	; 1
     644:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <aantal5cent+0x1>
     648:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <aantal5cent>
			char final_string_5c[20];
			sprintf(final_string_5c, "O5c%d\n", aantal5cent);
     64c:	9f 93       	push	r25
     64e:	8f 93       	push	r24
     650:	8d e1       	ldi	r24, 0x1D	; 29
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	9f 93       	push	r25
     656:	8f 93       	push	r24
     658:	8e 01       	movw	r16, r28
     65a:	0f 5f       	subi	r16, 0xFF	; 255
     65c:	1f 4f       	sbci	r17, 0xFF	; 255
     65e:	1f 93       	push	r17
     660:	0f 93       	push	r16
     662:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
			USART_Transmit_String(final_string_5c);
     666:	c8 01       	movw	r24, r16
     668:	0e 94 b6 02 	call	0x56c	; 0x56c <USART_Transmit_String>
		break;
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	8f c0       	rjmp	.+286    	; 0x798 <geld_Uitwerpen+0x1fa>
		case 20:
			shiftWrite(0b00000100);
     67a:	84 e0       	ldi	r24, 0x04	; 4
     67c:	0e 94 96 02 	call	0x52c	; 0x52c <shiftWrite>
			aantal20cent--;
     680:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <aantal20cent>
     684:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <aantal20cent+0x1>
     688:	01 97       	sbiw	r24, 0x01	; 1
     68a:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <aantal20cent+0x1>
     68e:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <aantal20cent>
			char final_string_20c[20];
			sprintf(final_string_20c, "O20c%d\n", aantal20cent);
     692:	9f 93       	push	r25
     694:	8f 93       	push	r24
     696:	84 e2       	ldi	r24, 0x24	; 36
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	9f 93       	push	r25
     69c:	8f 93       	push	r24
     69e:	8e 01       	movw	r16, r28
     6a0:	0f 5f       	subi	r16, 0xFF	; 255
     6a2:	1f 4f       	sbci	r17, 0xFF	; 255
     6a4:	1f 93       	push	r17
     6a6:	0f 93       	push	r16
     6a8:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
			USART_Transmit_String(final_string_20c);			
     6ac:	c8 01       	movw	r24, r16
     6ae:	0e 94 b6 02 	call	0x56c	; 0x56c <USART_Transmit_String>
		break;
     6b2:	0f 90       	pop	r0
     6b4:	0f 90       	pop	r0
     6b6:	0f 90       	pop	r0
     6b8:	0f 90       	pop	r0
     6ba:	0f 90       	pop	r0
     6bc:	0f 90       	pop	r0
     6be:	6c c0       	rjmp	.+216    	; 0x798 <geld_Uitwerpen+0x1fa>
		case 1:
			shiftWrite(0b00001000);
     6c0:	88 e0       	ldi	r24, 0x08	; 8
     6c2:	0e 94 96 02 	call	0x52c	; 0x52c <shiftWrite>
			aantal1eur--;
     6c6:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <aantal1eur>
     6ca:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <aantal1eur+0x1>
     6ce:	01 97       	sbiw	r24, 0x01	; 1
     6d0:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <aantal1eur+0x1>
     6d4:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <aantal1eur>
			char final_string_1eur[20];
			sprintf(final_string_1eur, "O100c%d\n", aantal1eur);
     6d8:	9f 93       	push	r25
     6da:	8f 93       	push	r24
     6dc:	8c e2       	ldi	r24, 0x2C	; 44
     6de:	91 e0       	ldi	r25, 0x01	; 1
     6e0:	9f 93       	push	r25
     6e2:	8f 93       	push	r24
     6e4:	8e 01       	movw	r16, r28
     6e6:	0f 5f       	subi	r16, 0xFF	; 255
     6e8:	1f 4f       	sbci	r17, 0xFF	; 255
     6ea:	1f 93       	push	r17
     6ec:	0f 93       	push	r16
     6ee:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
			USART_Transmit_String(final_string_1eur);
     6f2:	c8 01       	movw	r24, r16
     6f4:	0e 94 b6 02 	call	0x56c	; 0x56c <USART_Transmit_String>
		break;
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	0f 90       	pop	r0
     704:	49 c0       	rjmp	.+146    	; 0x798 <geld_Uitwerpen+0x1fa>
		case 50:
			shiftWrite(0b00010000);
     706:	80 e1       	ldi	r24, 0x10	; 16
     708:	0e 94 96 02 	call	0x52c	; 0x52c <shiftWrite>
			aantal50cent--;
     70c:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <aantal50cent>
     710:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <aantal50cent+0x1>
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <aantal50cent+0x1>
     71a:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <aantal50cent>
			char final_string_50c[20];
			sprintf(final_string_50c, "O50c%d\n", aantal50cent);
     71e:	9f 93       	push	r25
     720:	8f 93       	push	r24
     722:	85 e3       	ldi	r24, 0x35	; 53
     724:	91 e0       	ldi	r25, 0x01	; 1
     726:	9f 93       	push	r25
     728:	8f 93       	push	r24
     72a:	8e 01       	movw	r16, r28
     72c:	0f 5f       	subi	r16, 0xFF	; 255
     72e:	1f 4f       	sbci	r17, 0xFF	; 255
     730:	1f 93       	push	r17
     732:	0f 93       	push	r16
     734:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
			USART_Transmit_String(final_string_50c);
     738:	c8 01       	movw	r24, r16
     73a:	0e 94 b6 02 	call	0x56c	; 0x56c <USART_Transmit_String>
		break;
     73e:	0f 90       	pop	r0
     740:	0f 90       	pop	r0
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	0f 90       	pop	r0
     74a:	26 c0       	rjmp	.+76     	; 0x798 <geld_Uitwerpen+0x1fa>
		case 2:
			shiftWrite(0b00100000);
     74c:	80 e2       	ldi	r24, 0x20	; 32
     74e:	0e 94 96 02 	call	0x52c	; 0x52c <shiftWrite>
			aantal2eur--;
     752:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <aantal2eur>
     756:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <aantal2eur+0x1>
     75a:	01 97       	sbiw	r24, 0x01	; 1
     75c:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <aantal2eur+0x1>
     760:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <aantal2eur>
			char final_string_2eur[20];
			sprintf(final_string_2eur, "O200c%d\n", aantal2eur);
     764:	9f 93       	push	r25
     766:	8f 93       	push	r24
     768:	8d e3       	ldi	r24, 0x3D	; 61
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	9f 93       	push	r25
     76e:	8f 93       	push	r24
     770:	8e 01       	movw	r16, r28
     772:	0f 5f       	subi	r16, 0xFF	; 255
     774:	1f 4f       	sbci	r17, 0xFF	; 255
     776:	1f 93       	push	r17
     778:	0f 93       	push	r16
     77a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
			USART_Transmit_String(final_string_2eur);
     77e:	c8 01       	movw	r24, r16
     780:	0e 94 b6 02 	call	0x56c	; 0x56c <USART_Transmit_String>
		break;
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	0f 90       	pop	r0
     78a:	0f 90       	pop	r0
     78c:	0f 90       	pop	r0
     78e:	0f 90       	pop	r0
     790:	03 c0       	rjmp	.+6      	; 0x798 <geld_Uitwerpen+0x1fa>
		case 385:
			shiftWrite(0b00111111);
     792:	8f e3       	ldi	r24, 0x3F	; 63
     794:	0e 94 96 02 	call	0x52c	; 0x52c <shiftWrite>
		break;
	}
	buzzer();
     798:	0e 94 0c 02 	call	0x418	; 0x418 <buzzer>
	OCR1A=140; //180 graden
     79c:	e8 e8       	ldi	r30, 0x88	; 136
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	8c e8       	ldi	r24, 0x8C	; 140
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	91 83       	std	Z+1, r25	; 0x01
     7a6:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7a8:	8f ef       	ldi	r24, 0xFF	; 255
     7aa:	9f e5       	ldi	r25, 0x5F	; 95
     7ac:	23 e0       	ldi	r18, 0x03	; 3
     7ae:	81 50       	subi	r24, 0x01	; 1
     7b0:	90 40       	sbci	r25, 0x00	; 0
     7b2:	20 40       	sbci	r18, 0x00	; 0
     7b4:	e1 f7       	brne	.-8      	; 0x7ae <geld_Uitwerpen+0x210>
     7b6:	00 c0       	rjmp	.+0      	; 0x7b8 <geld_Uitwerpen+0x21a>
     7b8:	00 00       	nop
	_delay_ms(300); //Genoeg tijd om volledig uit te komen geven
	OCR1A= 25; //0 graden
     7ba:	89 e1       	ldi	r24, 0x19	; 25
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	91 83       	std	Z+1, r25	; 0x01
     7c0:	80 83       	st	Z, r24
     7c2:	8f ef       	ldi	r24, 0xFF	; 255
     7c4:	9f e9       	ldi	r25, 0x9F	; 159
     7c6:	25 e0       	ldi	r18, 0x05	; 5
     7c8:	81 50       	subi	r24, 0x01	; 1
     7ca:	90 40       	sbci	r25, 0x00	; 0
     7cc:	20 40       	sbci	r18, 0x00	; 0
     7ce:	e1 f7       	brne	.-8      	; 0x7c8 <geld_Uitwerpen+0x22a>
     7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <geld_Uitwerpen+0x234>
     7d2:	00 00       	nop
	_delay_ms(500); //Genoeg tijd om terug te keren geven
	shiftWrite(0b00000000);
     7d4:	80 e0       	ldi	r24, 0x00	; 0
     7d6:	0e 94 96 02 	call	0x52c	; 0x52c <shiftWrite>
}
     7da:	64 96       	adiw	r28, 0x14	; 20
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	f8 94       	cli
     7e0:	de bf       	out	0x3e, r29	; 62
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	cd bf       	out	0x3d, r28	; 61
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	1f 91       	pop	r17
     7ec:	0f 91       	pop	r16
     7ee:	08 95       	ret

000007f0 <geld_Aantal_Uitwerpen>:
		timerBuzzer_Start();
	}

}

void geld_Aantal_Uitwerpen(int bedrag){
     7f0:	cf 93       	push	r28
     7f2:	df 93       	push	r29
     7f4:	ec 01       	movw	r28, r24
	// Bereken de aantallen munten
	while (bedrag >= 200 && aantal2eur > 0) {
     7f6:	06 c0       	rjmp	.+12     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
		geld_Uitwerpen(2);
     7f8:	82 e0       	ldi	r24, 0x02	; 2
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	0e 94 cf 02 	call	0x59e	; 0x59e <geld_Uitwerpen>
		bedrag -= 200;
     800:	c8 5c       	subi	r28, 0xC8	; 200
     802:	d1 09       	sbc	r29, r1

}

void geld_Aantal_Uitwerpen(int bedrag){
	// Bereken de aantallen munten
	while (bedrag >= 200 && aantal2eur > 0) {
     804:	c8 3c       	cpi	r28, 0xC8	; 200
     806:	d1 05       	cpc	r29, r1
     808:	74 f0       	brlt	.+28     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     80a:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <aantal2eur>
     80e:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <aantal2eur+0x1>
     812:	18 16       	cp	r1, r24
     814:	19 06       	cpc	r1, r25
     816:	84 f3       	brlt	.-32     	; 0x7f8 <geld_Aantal_Uitwerpen+0x8>
     818:	06 c0       	rjmp	.+12     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
		geld_Uitwerpen(2);
		bedrag -= 200;
	}
	while (bedrag >= 100 && aantal1eur > 0) {
		geld_Uitwerpen(1);
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	0e 94 cf 02 	call	0x59e	; 0x59e <geld_Uitwerpen>
		bedrag -= 100;
     822:	c4 56       	subi	r28, 0x64	; 100
     824:	d1 09       	sbc	r29, r1
	// Bereken de aantallen munten
	while (bedrag >= 200 && aantal2eur > 0) {
		geld_Uitwerpen(2);
		bedrag -= 200;
	}
	while (bedrag >= 100 && aantal1eur > 0) {
     826:	c4 36       	cpi	r28, 0x64	; 100
     828:	d1 05       	cpc	r29, r1
     82a:	6c f0       	brlt	.+26     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     82c:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <aantal1eur>
     830:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <aantal1eur+0x1>
     834:	18 16       	cp	r1, r24
     836:	19 06       	cpc	r1, r25
     838:	84 f3       	brlt	.-32     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     83a:	05 c0       	rjmp	.+10     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
		geld_Uitwerpen(1);
		bedrag -= 100;
	}
	while (bedrag >= 50 && aantal50cent > 0) {
		geld_Uitwerpen(50);
     83c:	82 e3       	ldi	r24, 0x32	; 50
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	0e 94 cf 02 	call	0x59e	; 0x59e <geld_Uitwerpen>
		bedrag -= 50;
     844:	e2 97       	sbiw	r28, 0x32	; 50
	}
	while (bedrag >= 100 && aantal1eur > 0) {
		geld_Uitwerpen(1);
		bedrag -= 100;
	}
	while (bedrag >= 50 && aantal50cent > 0) {
     846:	c2 33       	cpi	r28, 0x32	; 50
     848:	d1 05       	cpc	r29, r1
     84a:	6c f0       	brlt	.+26     	; 0x866 <__DATA_REGION_LENGTH__+0x66>
     84c:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <aantal50cent>
     850:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <aantal50cent+0x1>
     854:	18 16       	cp	r1, r24
     856:	19 06       	cpc	r1, r25
     858:	8c f3       	brlt	.-30     	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     85a:	05 c0       	rjmp	.+10     	; 0x866 <__DATA_REGION_LENGTH__+0x66>
		geld_Uitwerpen(50);
		bedrag -= 50;
	}
	while (bedrag >= 20 && aantal20cent > 0) {
		geld_Uitwerpen(20);
     85c:	84 e1       	ldi	r24, 0x14	; 20
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	0e 94 cf 02 	call	0x59e	; 0x59e <geld_Uitwerpen>
		bedrag -= 20;
     864:	64 97       	sbiw	r28, 0x14	; 20
	}
	while (bedrag >= 50 && aantal50cent > 0) {
		geld_Uitwerpen(50);
		bedrag -= 50;
	}
	while (bedrag >= 20 && aantal20cent > 0) {
     866:	c4 31       	cpi	r28, 0x14	; 20
     868:	d1 05       	cpc	r29, r1
     86a:	6c f0       	brlt	.+26     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
     86c:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <aantal20cent>
     870:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <aantal20cent+0x1>
     874:	18 16       	cp	r1, r24
     876:	19 06       	cpc	r1, r25
     878:	8c f3       	brlt	.-30     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
     87a:	05 c0       	rjmp	.+10     	; 0x886 <__DATA_REGION_LENGTH__+0x86>
		geld_Uitwerpen(20);
		bedrag -= 20;
	}
	while (bedrag >= 10 && aantal10cent > 0) {
		geld_Uitwerpen(10);
     87c:	8a e0       	ldi	r24, 0x0A	; 10
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	0e 94 cf 02 	call	0x59e	; 0x59e <geld_Uitwerpen>
		bedrag -= 10;
     884:	2a 97       	sbiw	r28, 0x0a	; 10
	}
	while (bedrag >= 20 && aantal20cent > 0) {
		geld_Uitwerpen(20);
		bedrag -= 20;
	}
	while (bedrag >= 10 && aantal10cent > 0) {
     886:	ca 30       	cpi	r28, 0x0A	; 10
     888:	d1 05       	cpc	r29, r1
     88a:	6c f0       	brlt	.+26     	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
     88c:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <aantal10cent>
     890:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <aantal10cent+0x1>
     894:	18 16       	cp	r1, r24
     896:	19 06       	cpc	r1, r25
     898:	8c f3       	brlt	.-30     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
     89a:	05 c0       	rjmp	.+10     	; 0x8a6 <__DATA_REGION_LENGTH__+0xa6>
		geld_Uitwerpen(10);
		bedrag -= 10;
	}
	while (bedrag >= 5 && aantal5cent > 0) {
		geld_Uitwerpen(5);
     89c:	85 e0       	ldi	r24, 0x05	; 5
     89e:	90 e0       	ldi	r25, 0x00	; 0
     8a0:	0e 94 cf 02 	call	0x59e	; 0x59e <geld_Uitwerpen>
		bedrag -= 5;
     8a4:	25 97       	sbiw	r28, 0x05	; 5
	}
	while (bedrag >= 10 && aantal10cent > 0) {
		geld_Uitwerpen(10);
		bedrag -= 10;
	}
	while (bedrag >= 5 && aantal5cent > 0) {
     8a6:	c5 30       	cpi	r28, 0x05	; 5
     8a8:	d1 05       	cpc	r29, r1
     8aa:	3c f0       	brlt	.+14     	; 0x8ba <__DATA_REGION_LENGTH__+0xba>
     8ac:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <aantal5cent>
     8b0:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <aantal5cent+0x1>
     8b4:	18 16       	cp	r1, r24
     8b6:	19 06       	cpc	r1, r25
     8b8:	8c f3       	brlt	.-30     	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
		geld_Uitwerpen(5);
		bedrag -= 5;
	}
	
}
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <__vector_4>:
		if(s[i] == '\0') break;
		USART_Transmit_Char(s[i++]);
	}
}

ISR(PCINT0_vect){
     8c0:	1f 92       	push	r1
     8c2:	0f 92       	push	r0
     8c4:	0f b6       	in	r0, 0x3f	; 63
     8c6:	0f 92       	push	r0
     8c8:	11 24       	eor	r1, r1
     8ca:	0f 93       	push	r16
     8cc:	1f 93       	push	r17
     8ce:	2f 93       	push	r18
     8d0:	3f 93       	push	r19
     8d2:	4f 93       	push	r20
     8d4:	5f 93       	push	r21
     8d6:	6f 93       	push	r22
     8d8:	7f 93       	push	r23
     8da:	8f 93       	push	r24
     8dc:	9f 93       	push	r25
     8de:	af 93       	push	r26
     8e0:	bf 93       	push	r27
     8e2:	ef 93       	push	r30
     8e4:	ff 93       	push	r31
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62
     8ee:	64 97       	sbiw	r28, 0x14	; 20
     8f0:	de bf       	out	0x3e, r29	; 62
     8f2:	cd bf       	out	0x3d, r28	; 61
	if(buzzerAan){
     8f4:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <__data_end>
     8f8:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <__data_end+0x1>
     8fc:	89 2b       	or	r24, r25
     8fe:	11 f0       	breq	.+4      	; 0x904 <__stack+0x5>
		buzzer();
     900:	0e 94 0c 02 	call	0x418	; 0x418 <buzzer>
	}
	if(!(PINA&(1<<PINA0)) && detectOnceFlag2eur == 0){
     904:	00 99       	sbic	0x00, 0	; 0
     906:	3f c0       	rjmp	.+126    	; 0x986 <__stack+0x87>
     908:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <detectOnceFlag2eur>
     90c:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <detectOnceFlag2eur+0x1>
     910:	89 2b       	or	r24, r25
     912:	c9 f5       	brne	.+114    	; 0x986 <__stack+0x87>
		if(sorteerModus){ //Als je sorteert ook direct 1 terug uitwerpen
     914:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <sorteerModus>
     918:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <sorteerModus+0x1>
     91c:	89 2b       	or	r24, r25
     91e:	69 f0       	breq	.+26     	; 0x93a <__stack+0x3b>
     920:	2f ef       	ldi	r18, 0xFF	; 255
     922:	8f e5       	ldi	r24, 0x5F	; 95
     924:	93 e0       	ldi	r25, 0x03	; 3
     926:	21 50       	subi	r18, 0x01	; 1
     928:	80 40       	sbci	r24, 0x00	; 0
     92a:	90 40       	sbci	r25, 0x00	; 0
     92c:	e1 f7       	brne	.-8      	; 0x926 <__stack+0x27>
     92e:	00 c0       	rjmp	.+0      	; 0x930 <__stack+0x31>
     930:	00 00       	nop
			_delay_ms(300);
			geld_Uitwerpen(2);
     932:	82 e0       	ldi	r24, 0x02	; 2
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	0e 94 cf 02 	call	0x59e	; 0x59e <geld_Uitwerpen>
		}
		aantal2eur++;
     93a:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <aantal2eur>
     93e:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <aantal2eur+0x1>
     942:	01 96       	adiw	r24, 0x01	; 1
     944:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <aantal2eur+0x1>
     948:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <aantal2eur>
		char final_string[20];
		sprintf(final_string, "O200c%d\n", aantal2eur);
     94c:	9f 93       	push	r25
     94e:	8f 93       	push	r24
     950:	8d e3       	ldi	r24, 0x3D	; 61
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	9f 93       	push	r25
     956:	8f 93       	push	r24
     958:	8e 01       	movw	r16, r28
     95a:	0f 5f       	subi	r16, 0xFF	; 255
     95c:	1f 4f       	sbci	r17, 0xFF	; 255
     95e:	1f 93       	push	r17
     960:	0f 93       	push	r16
     962:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
		USART_Transmit_String(final_string);
     966:	c8 01       	movw	r24, r16
     968:	0e 94 b6 02 	call	0x56c	; 0x56c <USART_Transmit_String>
		detectOnceFlag2eur = 1;
     96c:	81 e0       	ldi	r24, 0x01	; 1
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <detectOnceFlag2eur+0x1>
     974:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <detectOnceFlag2eur>

ISR(PCINT0_vect){
	if(buzzerAan){
		buzzer();
	}
	if(!(PINA&(1<<PINA0)) && detectOnceFlag2eur == 0){
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	0f 90       	pop	r0
     97e:	0f 90       	pop	r0
     980:	0f 90       	pop	r0
     982:	0f 90       	pop	r0
     984:	06 c0       	rjmp	.+12     	; 0x992 <__stack+0x93>
		char final_string[20];
		sprintf(final_string, "O200c%d\n", aantal2eur);
		USART_Transmit_String(final_string);
		detectOnceFlag2eur = 1;
	}
	else if(PINA&(1<<PINA0)){
     986:	00 9b       	sbis	0x00, 0	; 0
     988:	04 c0       	rjmp	.+8      	; 0x992 <__stack+0x93>
		detectOnceFlag2eur = 0;
     98a:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <detectOnceFlag2eur+0x1>
     98e:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <detectOnceFlag2eur>
	}
	
	if(!(PINA&(1<<PINA1)) && detectOnceFlag50c == 0){
     992:	01 99       	sbic	0x00, 1	; 0
     994:	3f c0       	rjmp	.+126    	; 0xa14 <__stack+0x115>
     996:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <detectOnceFlag50c>
     99a:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <detectOnceFlag50c+0x1>
     99e:	89 2b       	or	r24, r25
     9a0:	c9 f5       	brne	.+114    	; 0xa14 <__stack+0x115>
		if(sorteerModus){
     9a2:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <sorteerModus>
     9a6:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <sorteerModus+0x1>
     9aa:	89 2b       	or	r24, r25
     9ac:	69 f0       	breq	.+26     	; 0x9c8 <__stack+0xc9>
     9ae:	2f ef       	ldi	r18, 0xFF	; 255
     9b0:	8f e5       	ldi	r24, 0x5F	; 95
     9b2:	93 e0       	ldi	r25, 0x03	; 3
     9b4:	21 50       	subi	r18, 0x01	; 1
     9b6:	80 40       	sbci	r24, 0x00	; 0
     9b8:	90 40       	sbci	r25, 0x00	; 0
     9ba:	e1 f7       	brne	.-8      	; 0x9b4 <__stack+0xb5>
     9bc:	00 c0       	rjmp	.+0      	; 0x9be <__stack+0xbf>
     9be:	00 00       	nop
			_delay_ms(300);
			geld_Uitwerpen(50);
     9c0:	82 e3       	ldi	r24, 0x32	; 50
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	0e 94 cf 02 	call	0x59e	; 0x59e <geld_Uitwerpen>
		}
		aantal50cent++;
     9c8:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <aantal50cent>
     9cc:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <aantal50cent+0x1>
     9d0:	01 96       	adiw	r24, 0x01	; 1
     9d2:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <aantal50cent+0x1>
     9d6:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <aantal50cent>
		char final_string[20];
		sprintf(final_string, "O50c%d\n", aantal50cent);
     9da:	9f 93       	push	r25
     9dc:	8f 93       	push	r24
     9de:	85 e3       	ldi	r24, 0x35	; 53
     9e0:	91 e0       	ldi	r25, 0x01	; 1
     9e2:	9f 93       	push	r25
     9e4:	8f 93       	push	r24
     9e6:	8e 01       	movw	r16, r28
     9e8:	0f 5f       	subi	r16, 0xFF	; 255
     9ea:	1f 4f       	sbci	r17, 0xFF	; 255
     9ec:	1f 93       	push	r17
     9ee:	0f 93       	push	r16
     9f0:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
		USART_Transmit_String(final_string);
     9f4:	c8 01       	movw	r24, r16
     9f6:	0e 94 b6 02 	call	0x56c	; 0x56c <USART_Transmit_String>
		detectOnceFlag50c = 1;
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <detectOnceFlag50c+0x1>
     a02:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <detectOnceFlag50c>
	}
	else if(PINA&(1<<PINA0)){
		detectOnceFlag2eur = 0;
	}
	
	if(!(PINA&(1<<PINA1)) && detectOnceFlag50c == 0){
     a06:	0f 90       	pop	r0
     a08:	0f 90       	pop	r0
     a0a:	0f 90       	pop	r0
     a0c:	0f 90       	pop	r0
     a0e:	0f 90       	pop	r0
     a10:	0f 90       	pop	r0
     a12:	06 c0       	rjmp	.+12     	; 0xa20 <__stack+0x121>
		char final_string[20];
		sprintf(final_string, "O50c%d\n", aantal50cent);
		USART_Transmit_String(final_string);
		detectOnceFlag50c = 1;
	}
	else if(PINA&(1<<PINA1)){
     a14:	01 9b       	sbis	0x00, 1	; 0
     a16:	04 c0       	rjmp	.+8      	; 0xa20 <__stack+0x121>
		detectOnceFlag50c = 0;
     a18:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <detectOnceFlag50c+0x1>
     a1c:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <detectOnceFlag50c>
	}
	
	if(!(PINA&(1<<PINA3)) && detectOnceFlag1eur == 0){
     a20:	03 99       	sbic	0x00, 3	; 0
     a22:	3f c0       	rjmp	.+126    	; 0xaa2 <__stack+0x1a3>
     a24:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <detectOnceFlag1eur>
     a28:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <detectOnceFlag1eur+0x1>
     a2c:	89 2b       	or	r24, r25
     a2e:	c9 f5       	brne	.+114    	; 0xaa2 <__stack+0x1a3>
		if(sorteerModus){
     a30:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <sorteerModus>
     a34:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <sorteerModus+0x1>
     a38:	89 2b       	or	r24, r25
     a3a:	69 f0       	breq	.+26     	; 0xa56 <__stack+0x157>
     a3c:	2f ef       	ldi	r18, 0xFF	; 255
     a3e:	8f e5       	ldi	r24, 0x5F	; 95
     a40:	93 e0       	ldi	r25, 0x03	; 3
     a42:	21 50       	subi	r18, 0x01	; 1
     a44:	80 40       	sbci	r24, 0x00	; 0
     a46:	90 40       	sbci	r25, 0x00	; 0
     a48:	e1 f7       	brne	.-8      	; 0xa42 <__stack+0x143>
     a4a:	00 c0       	rjmp	.+0      	; 0xa4c <__stack+0x14d>
     a4c:	00 00       	nop
			_delay_ms(300);
			geld_Uitwerpen(1);
     a4e:	81 e0       	ldi	r24, 0x01	; 1
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	0e 94 cf 02 	call	0x59e	; 0x59e <geld_Uitwerpen>
		}
		aantal1eur++;
     a56:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <aantal1eur>
     a5a:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <aantal1eur+0x1>
     a5e:	01 96       	adiw	r24, 0x01	; 1
     a60:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <aantal1eur+0x1>
     a64:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <aantal1eur>
		char final_string[20];
		sprintf(final_string, "O100c%d\n", aantal1eur);
     a68:	9f 93       	push	r25
     a6a:	8f 93       	push	r24
     a6c:	8c e2       	ldi	r24, 0x2C	; 44
     a6e:	91 e0       	ldi	r25, 0x01	; 1
     a70:	9f 93       	push	r25
     a72:	8f 93       	push	r24
     a74:	8e 01       	movw	r16, r28
     a76:	0f 5f       	subi	r16, 0xFF	; 255
     a78:	1f 4f       	sbci	r17, 0xFF	; 255
     a7a:	1f 93       	push	r17
     a7c:	0f 93       	push	r16
     a7e:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
		USART_Transmit_String(final_string);
     a82:	c8 01       	movw	r24, r16
     a84:	0e 94 b6 02 	call	0x56c	; 0x56c <USART_Transmit_String>
		detectOnceFlag1eur = 1;
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	90 e0       	ldi	r25, 0x00	; 0
     a8c:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <detectOnceFlag1eur+0x1>
     a90:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <detectOnceFlag1eur>
	}
	else if(PINA&(1<<PINA1)){
		detectOnceFlag50c = 0;
	}
	
	if(!(PINA&(1<<PINA3)) && detectOnceFlag1eur == 0){
     a94:	0f 90       	pop	r0
     a96:	0f 90       	pop	r0
     a98:	0f 90       	pop	r0
     a9a:	0f 90       	pop	r0
     a9c:	0f 90       	pop	r0
     a9e:	0f 90       	pop	r0
     aa0:	06 c0       	rjmp	.+12     	; 0xaae <__stack+0x1af>
		char final_string[20];
		sprintf(final_string, "O100c%d\n", aantal1eur);
		USART_Transmit_String(final_string);
		detectOnceFlag1eur = 1;
	}
	else if(PINA&(1<<PINA3)){
     aa2:	03 9b       	sbis	0x00, 3	; 0
     aa4:	04 c0       	rjmp	.+8      	; 0xaae <__stack+0x1af>
		detectOnceFlag1eur = 0;
     aa6:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <detectOnceFlag1eur+0x1>
     aaa:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <detectOnceFlag1eur>
	}
	
	if(!(PINA&(1<<PINA4)) && detectOnceFlag20c == 0){
     aae:	04 99       	sbic	0x00, 4	; 0
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__stack+0x231>
     ab2:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <detectOnceFlag20c>
     ab6:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <detectOnceFlag20c+0x1>
     aba:	89 2b       	or	r24, r25
     abc:	c9 f5       	brne	.+114    	; 0xb30 <__stack+0x231>
		if(sorteerModus){
     abe:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <sorteerModus>
     ac2:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <sorteerModus+0x1>
     ac6:	89 2b       	or	r24, r25
     ac8:	69 f0       	breq	.+26     	; 0xae4 <__stack+0x1e5>
     aca:	2f ef       	ldi	r18, 0xFF	; 255
     acc:	8f e5       	ldi	r24, 0x5F	; 95
     ace:	93 e0       	ldi	r25, 0x03	; 3
     ad0:	21 50       	subi	r18, 0x01	; 1
     ad2:	80 40       	sbci	r24, 0x00	; 0
     ad4:	90 40       	sbci	r25, 0x00	; 0
     ad6:	e1 f7       	brne	.-8      	; 0xad0 <__stack+0x1d1>
     ad8:	00 c0       	rjmp	.+0      	; 0xada <__stack+0x1db>
     ada:	00 00       	nop
			_delay_ms(300);
			geld_Uitwerpen(20);
     adc:	84 e1       	ldi	r24, 0x14	; 20
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	0e 94 cf 02 	call	0x59e	; 0x59e <geld_Uitwerpen>
		}
		aantal20cent++;
     ae4:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <aantal20cent>
     ae8:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <aantal20cent+0x1>
     aec:	01 96       	adiw	r24, 0x01	; 1
     aee:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <aantal20cent+0x1>
     af2:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <aantal20cent>
		char final_string[20];
		sprintf(final_string, "O20c%d\n", aantal20cent);
     af6:	9f 93       	push	r25
     af8:	8f 93       	push	r24
     afa:	84 e2       	ldi	r24, 0x24	; 36
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	9f 93       	push	r25
     b00:	8f 93       	push	r24
     b02:	8e 01       	movw	r16, r28
     b04:	0f 5f       	subi	r16, 0xFF	; 255
     b06:	1f 4f       	sbci	r17, 0xFF	; 255
     b08:	1f 93       	push	r17
     b0a:	0f 93       	push	r16
     b0c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
		USART_Transmit_String(final_string);
     b10:	c8 01       	movw	r24, r16
     b12:	0e 94 b6 02 	call	0x56c	; 0x56c <USART_Transmit_String>
		detectOnceFlag20c = 1;
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <detectOnceFlag20c+0x1>
     b1e:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <detectOnceFlag20c>
	}
	else if(PINA&(1<<PINA3)){
		detectOnceFlag1eur = 0;
	}
	
	if(!(PINA&(1<<PINA4)) && detectOnceFlag20c == 0){
     b22:	0f 90       	pop	r0
     b24:	0f 90       	pop	r0
     b26:	0f 90       	pop	r0
     b28:	0f 90       	pop	r0
     b2a:	0f 90       	pop	r0
     b2c:	0f 90       	pop	r0
     b2e:	06 c0       	rjmp	.+12     	; 0xb3c <__stack+0x23d>
		char final_string[20];
		sprintf(final_string, "O20c%d\n", aantal20cent);
		USART_Transmit_String(final_string);
		detectOnceFlag20c = 1;
	}
	else if(PINA&(1<<PINA4)){
     b30:	04 9b       	sbis	0x00, 4	; 0
     b32:	04 c0       	rjmp	.+8      	; 0xb3c <__stack+0x23d>
		detectOnceFlag20c = 0;
     b34:	10 92 65 01 	sts	0x0165, r1	; 0x800165 <detectOnceFlag20c+0x1>
     b38:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <detectOnceFlag20c>
	}
	
	if(!(PINA&(1<<PINA5)) && detectOnceFlag5c == 0){
     b3c:	05 99       	sbic	0x00, 5	; 0
     b3e:	3f c0       	rjmp	.+126    	; 0xbbe <__stack+0x2bf>
     b40:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <detectOnceFlag5c>
     b44:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <detectOnceFlag5c+0x1>
     b48:	89 2b       	or	r24, r25
     b4a:	c9 f5       	brne	.+114    	; 0xbbe <__stack+0x2bf>
		if(sorteerModus){
     b4c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <sorteerModus>
     b50:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <sorteerModus+0x1>
     b54:	89 2b       	or	r24, r25
     b56:	69 f0       	breq	.+26     	; 0xb72 <__stack+0x273>
     b58:	2f ef       	ldi	r18, 0xFF	; 255
     b5a:	8f e5       	ldi	r24, 0x5F	; 95
     b5c:	93 e0       	ldi	r25, 0x03	; 3
     b5e:	21 50       	subi	r18, 0x01	; 1
     b60:	80 40       	sbci	r24, 0x00	; 0
     b62:	90 40       	sbci	r25, 0x00	; 0
     b64:	e1 f7       	brne	.-8      	; 0xb5e <__stack+0x25f>
     b66:	00 c0       	rjmp	.+0      	; 0xb68 <__stack+0x269>
     b68:	00 00       	nop
			_delay_ms(300);
			geld_Uitwerpen(5);
     b6a:	85 e0       	ldi	r24, 0x05	; 5
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	0e 94 cf 02 	call	0x59e	; 0x59e <geld_Uitwerpen>
		}
		aantal5cent++;
     b72:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <aantal5cent>
     b76:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <aantal5cent+0x1>
     b7a:	01 96       	adiw	r24, 0x01	; 1
     b7c:	90 93 75 01 	sts	0x0175, r25	; 0x800175 <aantal5cent+0x1>
     b80:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <aantal5cent>
		char final_string[20];
		sprintf(final_string, "O5c%d\n", aantal5cent);
     b84:	9f 93       	push	r25
     b86:	8f 93       	push	r24
     b88:	8d e1       	ldi	r24, 0x1D	; 29
     b8a:	91 e0       	ldi	r25, 0x01	; 1
     b8c:	9f 93       	push	r25
     b8e:	8f 93       	push	r24
     b90:	8e 01       	movw	r16, r28
     b92:	0f 5f       	subi	r16, 0xFF	; 255
     b94:	1f 4f       	sbci	r17, 0xFF	; 255
     b96:	1f 93       	push	r17
     b98:	0f 93       	push	r16
     b9a:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
		USART_Transmit_String(final_string);
     b9e:	c8 01       	movw	r24, r16
     ba0:	0e 94 b6 02 	call	0x56c	; 0x56c <USART_Transmit_String>
		detectOnceFlag5c = 1;
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <detectOnceFlag5c+0x1>
     bac:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <detectOnceFlag5c>
	}
	else if(PINA&(1<<PINA4)){
		detectOnceFlag20c = 0;
	}
	
	if(!(PINA&(1<<PINA5)) && detectOnceFlag5c == 0){
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	0f 90       	pop	r0
     bb8:	0f 90       	pop	r0
     bba:	0f 90       	pop	r0
     bbc:	06 c0       	rjmp	.+12     	; 0xbca <__stack+0x2cb>
		char final_string[20];
		sprintf(final_string, "O5c%d\n", aantal5cent);
		USART_Transmit_String(final_string);
		detectOnceFlag5c = 1;
	}
	else if(PINA&(1<<PINA5)){
     bbe:	05 9b       	sbis	0x00, 5	; 0
     bc0:	04 c0       	rjmp	.+8      	; 0xbca <__stack+0x2cb>
		detectOnceFlag5c = 0;
     bc2:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <detectOnceFlag5c+0x1>
     bc6:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <detectOnceFlag5c>
	}
	
		if(!(PINA&(1<<PINA6)) && detectOnceFlag10c == 0){
     bca:	06 99       	sbic	0x00, 6	; 0
     bcc:	3f c0       	rjmp	.+126    	; 0xc4c <__stack+0x34d>
     bce:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <detectOnceFlag10c>
     bd2:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <detectOnceFlag10c+0x1>
     bd6:	89 2b       	or	r24, r25
     bd8:	c9 f5       	brne	.+114    	; 0xc4c <__stack+0x34d>
			if(sorteerModus){
     bda:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <sorteerModus>
     bde:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <sorteerModus+0x1>
     be2:	89 2b       	or	r24, r25
     be4:	69 f0       	breq	.+26     	; 0xc00 <__stack+0x301>
     be6:	2f ef       	ldi	r18, 0xFF	; 255
     be8:	8f e5       	ldi	r24, 0x5F	; 95
     bea:	93 e0       	ldi	r25, 0x03	; 3
     bec:	21 50       	subi	r18, 0x01	; 1
     bee:	80 40       	sbci	r24, 0x00	; 0
     bf0:	90 40       	sbci	r25, 0x00	; 0
     bf2:	e1 f7       	brne	.-8      	; 0xbec <__stack+0x2ed>
     bf4:	00 c0       	rjmp	.+0      	; 0xbf6 <__stack+0x2f7>
     bf6:	00 00       	nop
				_delay_ms(300);
				geld_Uitwerpen(10 );
     bf8:	8a e0       	ldi	r24, 0x0A	; 10
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	0e 94 cf 02 	call	0x59e	; 0x59e <geld_Uitwerpen>
			}
			aantal10cent++;
     c00:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <aantal10cent>
     c04:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <aantal10cent+0x1>
     c08:	01 96       	adiw	r24, 0x01	; 1
     c0a:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <aantal10cent+0x1>
     c0e:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <aantal10cent>
			char final_string[20];
			sprintf(final_string, "O10c%d\n", aantal10cent);
     c12:	9f 93       	push	r25
     c14:	8f 93       	push	r24
     c16:	85 e1       	ldi	r24, 0x15	; 21
     c18:	91 e0       	ldi	r25, 0x01	; 1
     c1a:	9f 93       	push	r25
     c1c:	8f 93       	push	r24
     c1e:	8e 01       	movw	r16, r28
     c20:	0f 5f       	subi	r16, 0xFF	; 255
     c22:	1f 4f       	sbci	r17, 0xFF	; 255
     c24:	1f 93       	push	r17
     c26:	0f 93       	push	r16
     c28:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
			USART_Transmit_String(final_string);
     c2c:	c8 01       	movw	r24, r16
     c2e:	0e 94 b6 02 	call	0x56c	; 0x56c <USART_Transmit_String>
			detectOnceFlag10c = 1;
     c32:	81 e0       	ldi	r24, 0x01	; 1
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <detectOnceFlag10c+0x1>
     c3a:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <detectOnceFlag10c>
	}
	else if(PINA&(1<<PINA5)){
		detectOnceFlag5c = 0;
	}
	
		if(!(PINA&(1<<PINA6)) && detectOnceFlag10c == 0){
     c3e:	0f 90       	pop	r0
     c40:	0f 90       	pop	r0
     c42:	0f 90       	pop	r0
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	06 c0       	rjmp	.+12     	; 0xc58 <__stack+0x359>
			char final_string[20];
			sprintf(final_string, "O10c%d\n", aantal10cent);
			USART_Transmit_String(final_string);
			detectOnceFlag10c = 1;
		}
		else if(PINA&(1<<PINA6)){
     c4c:	06 9b       	sbis	0x00, 6	; 0
     c4e:	04 c0       	rjmp	.+8      	; 0xc58 <__stack+0x359>
			detectOnceFlag10c = 0;
     c50:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <detectOnceFlag10c+0x1>
     c54:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <detectOnceFlag10c>
     c58:	8f ef       	ldi	r24, 0xFF	; 255
     c5a:	93 e2       	ldi	r25, 0x23	; 35
     c5c:	01 97       	sbiw	r24, 0x01	; 1
     c5e:	f1 f7       	brne	.-4      	; 0xc5c <__stack+0x35d>
     c60:	00 c0       	rjmp	.+0      	; 0xc62 <__stack+0x363>
     c62:	00 00       	nop
		}
	_delay_ms(10);
	
	calculateTotalEuros();
}
     c64:	64 96       	adiw	r28, 0x14	; 20
     c66:	0f b6       	in	r0, 0x3f	; 63
     c68:	f8 94       	cli
     c6a:	de bf       	out	0x3e, r29	; 62
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	cd bf       	out	0x3d, r28	; 61
     c70:	df 91       	pop	r29
     c72:	cf 91       	pop	r28
     c74:	ff 91       	pop	r31
     c76:	ef 91       	pop	r30
     c78:	bf 91       	pop	r27
     c7a:	af 91       	pop	r26
     c7c:	9f 91       	pop	r25
     c7e:	8f 91       	pop	r24
     c80:	7f 91       	pop	r23
     c82:	6f 91       	pop	r22
     c84:	5f 91       	pop	r21
     c86:	4f 91       	pop	r20
     c88:	3f 91       	pop	r19
     c8a:	2f 91       	pop	r18
     c8c:	1f 91       	pop	r17
     c8e:	0f 91       	pop	r16
     c90:	0f 90       	pop	r0
     c92:	0f be       	out	0x3f, r0	; 63
     c94:	0f 90       	pop	r0
     c96:	1f 90       	pop	r1
     c98:	18 95       	reti

00000c9a <__vector_16>:

ISR(TIMER0_COMPA_vect){
     c9a:	1f 92       	push	r1
     c9c:	0f 92       	push	r0
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	0f 92       	push	r0
     ca2:	11 24       	eor	r1, r1
     ca4:	8f 93       	push	r24
	PORTC &= ~(1<<PORTC5);
     ca6:	88 b1       	in	r24, 0x08	; 8
     ca8:	8f 7d       	andi	r24, 0xDF	; 223
     caa:	88 b9       	out	0x08, r24	; 8
}
     cac:	8f 91       	pop	r24
     cae:	0f 90       	pop	r0
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	0f 90       	pop	r0
     cb4:	1f 90       	pop	r1
     cb6:	18 95       	reti

00000cb8 <dataVerwerken>:
		pos++;
	}
}

//De data verwerken
void dataVerwerken(void){
     cb8:	ef 92       	push	r14
     cba:	ff 92       	push	r15
     cbc:	0f 93       	push	r16
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	c8 57       	subi	r28, 0x78	; 120
     cca:	d1 09       	sbc	r29, r1
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	f8 94       	cli
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	cd bf       	out	0x3d, r28	; 61
	
	if(strstr(rx_buff, "s")) //Servo activeren S[nummer servo] = S5 = 5cent uitwerpen
     cd6:	63 e7       	ldi	r22, 0x73	; 115
     cd8:	70 e0       	ldi	r23, 0x00	; 0
     cda:	86 e7       	ldi	r24, 0x76	; 118
     cdc:	91 e0       	ldi	r25, 0x01	; 1
     cde:	0e 94 db 08 	call	0x11b6	; 0x11b6 <strchr>
     ce2:	00 97       	sbiw	r24, 0x00	; 0
     ce4:	31 f0       	breq	.+12     	; 0xcf2 <dataVerwerken+0x3a>
	{
		char *numString = strstr(rx_buff, "s") + strlen("s");
		int num = atoi(numString);
     ce6:	01 96       	adiw	r24, 0x01	; 1
     ce8:	0e 94 bd 08 	call	0x117a	; 0x117a <atoi>
		geld_Uitwerpen(num);
     cec:	0e 94 cf 02 	call	0x59e	; 0x59e <geld_Uitwerpen>
     cf0:	f7 c1       	rjmp	.+1006   	; 0x10e0 <dataVerwerken+0x428>
	}
	else if(strstr(rx_buff, "u")) //Geldbedrag uitwerpen U[156] = 1eur56cent
     cf2:	65 e7       	ldi	r22, 0x75	; 117
     cf4:	70 e0       	ldi	r23, 0x00	; 0
     cf6:	86 e7       	ldi	r24, 0x76	; 118
     cf8:	91 e0       	ldi	r25, 0x01	; 1
     cfa:	0e 94 db 08 	call	0x11b6	; 0x11b6 <strchr>
     cfe:	00 97       	sbiw	r24, 0x00	; 0
     d00:	31 f0       	breq	.+12     	; 0xd0e <dataVerwerken+0x56>
	{
		char *numString = strstr(rx_buff, "u") + strlen("u");
		int num = atoi(numString);
     d02:	01 96       	adiw	r24, 0x01	; 1
     d04:	0e 94 bd 08 	call	0x117a	; 0x117a <atoi>
		geld_Aantal_Uitwerpen(num);
     d08:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <geld_Aantal_Uitwerpen>
     d0c:	e9 c1       	rjmp	.+978    	; 0x10e0 <dataVerwerken+0x428>
	}
else if (strstr(rx_buff, "o")) {
     d0e:	6f e6       	ldi	r22, 0x6F	; 111
     d10:	70 e0       	ldi	r23, 0x00	; 0
     d12:	86 e7       	ldi	r24, 0x76	; 118
     d14:	91 e0       	ldi	r25, 0x01	; 1
     d16:	0e 94 db 08 	call	0x11b6	; 0x11b6 <strchr>
     d1a:	89 2b       	or	r24, r25
     d1c:	09 f4       	brne	.+2      	; 0xd20 <dataVerwerken+0x68>
     d1e:	eb c0       	rjmp	.+470    	; 0xef6 <dataVerwerken+0x23e>
	char *amountPtr = strstr(rx_buff, "c");
     d20:	63 e6       	ldi	r22, 0x63	; 99
     d22:	70 e0       	ldi	r23, 0x00	; 0
     d24:	86 e7       	ldi	r24, 0x76	; 118
     d26:	91 e0       	ldi	r25, 0x01	; 1
     d28:	0e 94 db 08 	call	0x11b6	; 0x11b6 <strchr>
     d2c:	8c 01       	movw	r16, r24

	if (amountPtr != NULL) {
     d2e:	00 97       	sbiw	r24, 0x00	; 0
     d30:	09 f4       	brne	.+2      	; 0xd34 <dataVerwerken+0x7c>
     d32:	d6 c1       	rjmp	.+940    	; 0x10e0 <dataVerwerken+0x428>
		*amountPtr = '\0'; // Null-terminate the coin type string
     d34:	fc 01       	movw	r30, r24
     d36:	11 92       	st	Z+, r1
     d38:	cf 01       	movw	r24, r30
		int amount = atoi(amountPtr + 1);
     d3a:	0e 94 bd 08 	call	0x117a	; 0x117a <atoi>
     d3e:	f8 2e       	mov	r15, r24
     d40:	e9 2e       	mov	r14, r25

		// Move back to find the start of the coin type
		while (amountPtr > rx_buff && *(amountPtr - 1) != 'o') {
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <dataVerwerken+0x90>
			amountPtr--;
     d44:	01 50       	subi	r16, 0x01	; 1
     d46:	11 09       	sbc	r17, r1
	if (amountPtr != NULL) {
		*amountPtr = '\0'; // Null-terminate the coin type string
		int amount = atoi(amountPtr + 1);

		// Move back to find the start of the coin type
		while (amountPtr > rx_buff && *(amountPtr - 1) != 'o') {
     d48:	f1 e0       	ldi	r31, 0x01	; 1
     d4a:	06 37       	cpi	r16, 0x76	; 118
     d4c:	1f 07       	cpc	r17, r31
     d4e:	31 f0       	breq	.+12     	; 0xd5c <dataVerwerken+0xa4>
     d50:	28 f0       	brcs	.+10     	; 0xd5c <dataVerwerken+0xa4>
     d52:	f8 01       	movw	r30, r16
     d54:	31 97       	sbiw	r30, 0x01	; 1
     d56:	80 81       	ld	r24, Z
     d58:	8f 36       	cpi	r24, 0x6F	; 111
     d5a:	a1 f7       	brne	.-24     	; 0xd44 <dataVerwerken+0x8c>
			amountPtr--;
		}

		// Now amountPtr points to the start of the coin type
		// Update variables based on the coin type
		if (strcmp(amountPtr, "10") == 0) {
     d5c:	66 e4       	ldi	r22, 0x46	; 70
     d5e:	71 e0       	ldi	r23, 0x01	; 1
     d60:	c8 01       	movw	r24, r16
     d62:	0e 94 e6 08 	call	0x11cc	; 0x11cc <strcmp>
     d66:	89 2b       	or	r24, r25
     d68:	d9 f4       	brne	.+54     	; 0xda0 <dataVerwerken+0xe8>
			aantal10cent = amount;
     d6a:	f0 92 72 01 	sts	0x0172, r15	; 0x800172 <aantal10cent>
     d6e:	e0 92 73 01 	sts	0x0173, r14	; 0x800173 <aantal10cent+0x1>
			char final_string_wrong[20];
			sprintf(final_string_wrong, "O10c%d\n", aantal10cent);
     d72:	ef 92       	push	r14
     d74:	ff 92       	push	r15
     d76:	85 e1       	ldi	r24, 0x15	; 21
     d78:	91 e0       	ldi	r25, 0x01	; 1
     d7a:	9f 93       	push	r25
     d7c:	8f 93       	push	r24
     d7e:	8e 01       	movw	r16, r28
     d80:	0f 5f       	subi	r16, 0xFF	; 255
     d82:	1f 4f       	sbci	r17, 0xFF	; 255
     d84:	1f 93       	push	r17
     d86:	0f 93       	push	r16
     d88:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
			USART_Transmit_String(final_string_wrong);
     d8c:	c8 01       	movw	r24, r16
     d8e:	0e 94 b6 02 	call	0x56c	; 0x56c <USART_Transmit_String>
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	0f 90       	pop	r0
     d9e:	a0 c1       	rjmp	.+832    	; 0x10e0 <dataVerwerken+0x428>
			} 
			else if (strcmp(amountPtr, "5") == 0) {
     da0:	69 e4       	ldi	r22, 0x49	; 73
     da2:	71 e0       	ldi	r23, 0x01	; 1
     da4:	c8 01       	movw	r24, r16
     da6:	0e 94 e6 08 	call	0x11cc	; 0x11cc <strcmp>
     daa:	89 2b       	or	r24, r25
     dac:	d9 f4       	brne	.+54     	; 0xde4 <dataVerwerken+0x12c>
			aantal5cent = amount;
     dae:	f0 92 74 01 	sts	0x0174, r15	; 0x800174 <aantal5cent>
     db2:	e0 92 75 01 	sts	0x0175, r14	; 0x800175 <aantal5cent+0x1>
			char final_string_wrong[20];
			sprintf(final_string_wrong, "O5c%d\n", aantal5cent);
     db6:	ef 92       	push	r14
     db8:	ff 92       	push	r15
     dba:	8d e1       	ldi	r24, 0x1D	; 29
     dbc:	91 e0       	ldi	r25, 0x01	; 1
     dbe:	9f 93       	push	r25
     dc0:	8f 93       	push	r24
     dc2:	8e 01       	movw	r16, r28
     dc4:	0f 5f       	subi	r16, 0xFF	; 255
     dc6:	1f 4f       	sbci	r17, 0xFF	; 255
     dc8:	1f 93       	push	r17
     dca:	0f 93       	push	r16
     dcc:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
			USART_Transmit_String(final_string_wrong);
     dd0:	c8 01       	movw	r24, r16
     dd2:	0e 94 b6 02 	call	0x56c	; 0x56c <USART_Transmit_String>
     dd6:	0f 90       	pop	r0
     dd8:	0f 90       	pop	r0
     dda:	0f 90       	pop	r0
     ddc:	0f 90       	pop	r0
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	7e c1       	rjmp	.+764    	; 0x10e0 <dataVerwerken+0x428>
			} 
			else if (strcmp(amountPtr, "20") == 0) {
     de4:	6b e4       	ldi	r22, 0x4B	; 75
     de6:	71 e0       	ldi	r23, 0x01	; 1
     de8:	c8 01       	movw	r24, r16
     dea:	0e 94 e6 08 	call	0x11cc	; 0x11cc <strcmp>
     dee:	89 2b       	or	r24, r25
     df0:	d9 f4       	brne	.+54     	; 0xe28 <dataVerwerken+0x170>
			aantal20cent = amount;
     df2:	f0 92 70 01 	sts	0x0170, r15	; 0x800170 <aantal20cent>
     df6:	e0 92 71 01 	sts	0x0171, r14	; 0x800171 <aantal20cent+0x1>
			char final_string_wrong[20];
			sprintf(final_string_wrong, "O20c%d\n", aantal20cent);
     dfa:	ef 92       	push	r14
     dfc:	ff 92       	push	r15
     dfe:	84 e2       	ldi	r24, 0x24	; 36
     e00:	91 e0       	ldi	r25, 0x01	; 1
     e02:	9f 93       	push	r25
     e04:	8f 93       	push	r24
     e06:	8e 01       	movw	r16, r28
     e08:	0f 5f       	subi	r16, 0xFF	; 255
     e0a:	1f 4f       	sbci	r17, 0xFF	; 255
     e0c:	1f 93       	push	r17
     e0e:	0f 93       	push	r16
     e10:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
			USART_Transmit_String(final_string_wrong);
     e14:	c8 01       	movw	r24, r16
     e16:	0e 94 b6 02 	call	0x56c	; 0x56c <USART_Transmit_String>
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	0f 90       	pop	r0
     e20:	0f 90       	pop	r0
     e22:	0f 90       	pop	r0
     e24:	0f 90       	pop	r0
     e26:	5c c1       	rjmp	.+696    	; 0x10e0 <dataVerwerken+0x428>
			}
			else if (strcmp(amountPtr, "50") == 0) {
     e28:	6e e4       	ldi	r22, 0x4E	; 78
     e2a:	71 e0       	ldi	r23, 0x01	; 1
     e2c:	c8 01       	movw	r24, r16
     e2e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <strcmp>
     e32:	89 2b       	or	r24, r25
     e34:	d9 f4       	brne	.+54     	; 0xe6c <dataVerwerken+0x1b4>
				aantal50cent = amount;
     e36:	f0 92 6e 01 	sts	0x016E, r15	; 0x80016e <aantal50cent>
     e3a:	e0 92 6f 01 	sts	0x016F, r14	; 0x80016f <aantal50cent+0x1>
				char final_string_wrong[20];
				sprintf(final_string_wrong, "O50c%d\n", aantal50cent);
     e3e:	ef 92       	push	r14
     e40:	ff 92       	push	r15
     e42:	85 e3       	ldi	r24, 0x35	; 53
     e44:	91 e0       	ldi	r25, 0x01	; 1
     e46:	9f 93       	push	r25
     e48:	8f 93       	push	r24
     e4a:	8e 01       	movw	r16, r28
     e4c:	0f 5f       	subi	r16, 0xFF	; 255
     e4e:	1f 4f       	sbci	r17, 0xFF	; 255
     e50:	1f 93       	push	r17
     e52:	0f 93       	push	r16
     e54:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
				USART_Transmit_String(final_string_wrong);
     e58:	c8 01       	movw	r24, r16
     e5a:	0e 94 b6 02 	call	0x56c	; 0x56c <USART_Transmit_String>
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	0f 90       	pop	r0
     e6a:	3a c1       	rjmp	.+628    	; 0x10e0 <dataVerwerken+0x428>
			}
			else if (strcmp(amountPtr, "100") == 0) {
     e6c:	61 e5       	ldi	r22, 0x51	; 81
     e6e:	71 e0       	ldi	r23, 0x01	; 1
     e70:	c8 01       	movw	r24, r16
     e72:	0e 94 e6 08 	call	0x11cc	; 0x11cc <strcmp>
     e76:	89 2b       	or	r24, r25
     e78:	d9 f4       	brne	.+54     	; 0xeb0 <dataVerwerken+0x1f8>
				aantal1eur = amount;
     e7a:	f0 92 6c 01 	sts	0x016C, r15	; 0x80016c <aantal1eur>
     e7e:	e0 92 6d 01 	sts	0x016D, r14	; 0x80016d <aantal1eur+0x1>
				char final_string_wrong[20];
				sprintf(final_string_wrong, "O100c%d\n", aantal1eur);
     e82:	ef 92       	push	r14
     e84:	ff 92       	push	r15
     e86:	8c e2       	ldi	r24, 0x2C	; 44
     e88:	91 e0       	ldi	r25, 0x01	; 1
     e8a:	9f 93       	push	r25
     e8c:	8f 93       	push	r24
     e8e:	8e 01       	movw	r16, r28
     e90:	0f 5f       	subi	r16, 0xFF	; 255
     e92:	1f 4f       	sbci	r17, 0xFF	; 255
     e94:	1f 93       	push	r17
     e96:	0f 93       	push	r16
     e98:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
				USART_Transmit_String(final_string_wrong);
     e9c:	c8 01       	movw	r24, r16
     e9e:	0e 94 b6 02 	call	0x56c	; 0x56c <USART_Transmit_String>
     ea2:	0f 90       	pop	r0
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	18 c1       	rjmp	.+560    	; 0x10e0 <dataVerwerken+0x428>
			}
			else if (strcmp(amountPtr, "200") == 0) {
     eb0:	65 e5       	ldi	r22, 0x55	; 85
     eb2:	71 e0       	ldi	r23, 0x01	; 1
     eb4:	c8 01       	movw	r24, r16
     eb6:	0e 94 e6 08 	call	0x11cc	; 0x11cc <strcmp>
     eba:	89 2b       	or	r24, r25
     ebc:	09 f0       	breq	.+2      	; 0xec0 <dataVerwerken+0x208>
     ebe:	10 c1       	rjmp	.+544    	; 0x10e0 <dataVerwerken+0x428>
				aantal2eur = amount;
     ec0:	f0 92 6a 01 	sts	0x016A, r15	; 0x80016a <aantal2eur>
     ec4:	e0 92 6b 01 	sts	0x016B, r14	; 0x80016b <aantal2eur+0x1>
				char final_string_wrong[20];
				sprintf(final_string_wrong, "O200c%d\n", aantal2eur);
     ec8:	ef 92       	push	r14
     eca:	ff 92       	push	r15
     ecc:	8d e3       	ldi	r24, 0x3D	; 61
     ece:	91 e0       	ldi	r25, 0x01	; 1
     ed0:	9f 93       	push	r25
     ed2:	8f 93       	push	r24
     ed4:	8e 01       	movw	r16, r28
     ed6:	0f 5f       	subi	r16, 0xFF	; 255
     ed8:	1f 4f       	sbci	r17, 0xFF	; 255
     eda:	1f 93       	push	r17
     edc:	0f 93       	push	r16
     ede:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
				USART_Transmit_String(final_string_wrong);
     ee2:	c8 01       	movw	r24, r16
     ee4:	0e 94 b6 02 	call	0x56c	; 0x56c <USART_Transmit_String>
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	f5 c0       	rjmp	.+490    	; 0x10e0 <dataVerwerken+0x428>
			}
	}
}
	else if(strstr(rx_buff, "b")) //Buzzer als het 0 is af en 1 aan B[0]
     ef6:	62 e6       	ldi	r22, 0x62	; 98
     ef8:	70 e0       	ldi	r23, 0x00	; 0
     efa:	86 e7       	ldi	r24, 0x76	; 118
     efc:	91 e0       	ldi	r25, 0x01	; 1
     efe:	0e 94 db 08 	call	0x11b6	; 0x11b6 <strchr>
     f02:	00 97       	sbiw	r24, 0x00	; 0
     f04:	89 f0       	breq	.+34     	; 0xf28 <dataVerwerken+0x270>
	{
		char *numString = strstr(rx_buff, "b") + strlen("b");
		int num = atoi(numString);
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	0e 94 bd 08 	call	0x117a	; 0x117a <atoi>
		if(num == 1){
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	39 f4       	brne	.+14     	; 0xf1e <dataVerwerken+0x266>
			buzzerAan = 1;
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <__data_end+0x1>
     f18:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__data_end>
     f1c:	e1 c0       	rjmp	.+450    	; 0x10e0 <dataVerwerken+0x428>
		}
		else{
			buzzerAan = 0;
     f1e:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <__data_end+0x1>
     f22:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <__data_end>
     f26:	dc c0       	rjmp	.+440    	; 0x10e0 <dataVerwerken+0x428>
		}
	}
	else if(strstr(rx_buff, "d")) //doorlaten als het 0 is af en 1 aan d[0]
     f28:	64 e6       	ldi	r22, 0x64	; 100
     f2a:	70 e0       	ldi	r23, 0x00	; 0
     f2c:	86 e7       	ldi	r24, 0x76	; 118
     f2e:	91 e0       	ldi	r25, 0x01	; 1
     f30:	0e 94 db 08 	call	0x11b6	; 0x11b6 <strchr>
     f34:	00 97       	sbiw	r24, 0x00	; 0
     f36:	89 f0       	breq	.+34     	; 0xf5a <dataVerwerken+0x2a2>
	{
		char *numString = strstr(rx_buff, "d") + strlen("d");
		int num = atoi(numString);
     f38:	01 96       	adiw	r24, 0x01	; 1
     f3a:	0e 94 bd 08 	call	0x117a	; 0x117a <atoi>
		if(num == 1){
     f3e:	01 97       	sbiw	r24, 0x01	; 1
     f40:	39 f4       	brne	.+14     	; 0xf50 <dataVerwerken+0x298>
			sorteerModus = 1;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <sorteerModus+0x1>
     f4a:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <sorteerModus>
     f4e:	c8 c0       	rjmp	.+400    	; 0x10e0 <dataVerwerken+0x428>
		}
		else{
			sorteerModus = 0;
     f50:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <sorteerModus+0x1>
     f54:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <sorteerModus>
     f58:	c3 c0       	rjmp	.+390    	; 0x10e0 <dataVerwerken+0x428>
		}
	}
		else if(strstr(rx_buff, "l")) //lcd af als het 0 is en aan en 1 aan d[0]
     f5a:	6c e6       	ldi	r22, 0x6C	; 108
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	86 e7       	ldi	r24, 0x76	; 118
     f60:	91 e0       	ldi	r25, 0x01	; 1
     f62:	0e 94 db 08 	call	0x11b6	; 0x11b6 <strchr>
     f66:	00 97       	sbiw	r24, 0x00	; 0
     f68:	b9 f0       	breq	.+46     	; 0xf98 <dataVerwerken+0x2e0>
		{
			char *numString = strstr(rx_buff, "l") + strlen("l");
			int num = atoi(numString);
     f6a:	01 96       	adiw	r24, 0x01	; 1
     f6c:	0e 94 bd 08 	call	0x117a	; 0x117a <atoi>
			if(num == 1){
     f70:	01 97       	sbiw	r24, 0x01	; 1
     f72:	49 f4       	brne	.+18     	; 0xf86 <dataVerwerken+0x2ce>
					lq_turnOnBacklight(&device); // simply turning on the backlight
     f74:	8a e8       	ldi	r24, 0x8A	; 138
     f76:	91 e0       	ldi	r25, 0x01	; 1
     f78:	0e 94 b7 00 	call	0x16e	; 0x16e <lq_turnOnBacklight>
					lq_turnOnDisplay(&device); // simply turning on the backlight
     f7c:	8a e8       	ldi	r24, 0x8A	; 138
     f7e:	91 e0       	ldi	r25, 0x01	; 1
     f80:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <lq_turnOnDisplay>
     f84:	ad c0       	rjmp	.+346    	; 0x10e0 <dataVerwerken+0x428>
			}
			else{
					lq_turnOffBacklight(&device); // simply turning on the backlight
     f86:	8a e8       	ldi	r24, 0x8A	; 138
     f88:	91 e0       	ldi	r25, 0x01	; 1
     f8a:	0e 94 be 00 	call	0x17c	; 0x17c <lq_turnOffBacklight>
					lq_turnOffDisplay(&device); // simply turning on the backlight
     f8e:	8a e8       	ldi	r24, 0x8A	; 138
     f90:	91 e0       	ldi	r25, 0x01	; 1
     f92:	0e 94 64 01 	call	0x2c8	; 0x2c8 <lq_turnOffDisplay>
     f96:	a4 c0       	rjmp	.+328    	; 0x10e0 <dataVerwerken+0x428>
			}
		}
	else if(strstr(rx_buff, "v")) //C# programma controleerd of er verbinding is
     f98:	66 e7       	ldi	r22, 0x76	; 118
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	86 e7       	ldi	r24, 0x76	; 118
     f9e:	91 e0       	ldi	r25, 0x01	; 1
     fa0:	0e 94 db 08 	call	0x11b6	; 0x11b6 <strchr>
     fa4:	89 2b       	or	r24, r25
     fa6:	09 f4       	brne	.+2      	; 0xfaa <dataVerwerken+0x2f2>
     fa8:	9b c0       	rjmp	.+310    	; 0x10e0 <dataVerwerken+0x428>
	{
		char final_string2eur[20];
		sprintf(final_string2eur, "O200c%d\n", aantal2eur);
     faa:	80 91 6b 01 	lds	r24, 0x016B	; 0x80016b <aantal2eur+0x1>
     fae:	8f 93       	push	r24
     fb0:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <aantal2eur>
     fb4:	8f 93       	push	r24
     fb6:	8d e3       	ldi	r24, 0x3D	; 61
     fb8:	91 e0       	ldi	r25, 0x01	; 1
     fba:	9f 93       	push	r25
     fbc:	8f 93       	push	r24
     fbe:	8e 01       	movw	r16, r28
     fc0:	0b 59       	subi	r16, 0x9B	; 155
     fc2:	1f 4f       	sbci	r17, 0xFF	; 255
     fc4:	1f 93       	push	r17
     fc6:	0f 93       	push	r16
     fc8:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
		USART_Transmit_String(final_string2eur);
     fcc:	c8 01       	movw	r24, r16
     fce:	0e 94 b6 02 	call	0x56c	; 0x56c <USART_Transmit_String>
     fd2:	26 e6       	ldi	r18, 0x66	; 102
     fd4:	86 ee       	ldi	r24, 0xE6	; 230
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	21 50       	subi	r18, 0x01	; 1
     fda:	80 40       	sbci	r24, 0x00	; 0
     fdc:	90 40       	sbci	r25, 0x00	; 0
     fde:	e1 f7       	brne	.-8      	; 0xfd8 <dataVerwerken+0x320>
		_delay_ms(80);
		char final_string50c[20];
		sprintf(final_string50c, "O50c%d\n", aantal50cent);
     fe0:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <aantal50cent+0x1>
     fe4:	8f 93       	push	r24
     fe6:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <aantal50cent>
     fea:	8f 93       	push	r24
     fec:	85 e3       	ldi	r24, 0x35	; 53
     fee:	91 e0       	ldi	r25, 0x01	; 1
     ff0:	9f 93       	push	r25
     ff2:	8f 93       	push	r24
     ff4:	04 51       	subi	r16, 0x14	; 20
     ff6:	11 09       	sbc	r17, r1
     ff8:	1f 93       	push	r17
     ffa:	0f 93       	push	r16
     ffc:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
		USART_Transmit_String(final_string50c);
    1000:	c8 01       	movw	r24, r16
    1002:	0e 94 b6 02 	call	0x56c	; 0x56c <USART_Transmit_String>
    1006:	e6 e6       	ldi	r30, 0x66	; 102
    1008:	f6 ee       	ldi	r31, 0xE6	; 230
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	e1 50       	subi	r30, 0x01	; 1
    100e:	f0 40       	sbci	r31, 0x00	; 0
    1010:	20 40       	sbci	r18, 0x00	; 0
    1012:	e1 f7       	brne	.-8      	; 0x100c <dataVerwerken+0x354>
		_delay_ms(80);
		char final_string1eur[20];
		sprintf(final_string1eur, "O100c%d\n", aantal1eur);
    1014:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <aantal1eur+0x1>
    1018:	8f 93       	push	r24
    101a:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <aantal1eur>
    101e:	8f 93       	push	r24
    1020:	8c e2       	ldi	r24, 0x2C	; 44
    1022:	91 e0       	ldi	r25, 0x01	; 1
    1024:	9f 93       	push	r25
    1026:	8f 93       	push	r24
    1028:	04 51       	subi	r16, 0x14	; 20
    102a:	11 09       	sbc	r17, r1
    102c:	1f 93       	push	r17
    102e:	0f 93       	push	r16
    1030:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
		USART_Transmit_String(final_string1eur);
    1034:	c8 01       	movw	r24, r16
    1036:	0e 94 b6 02 	call	0x56c	; 0x56c <USART_Transmit_String>
    103a:	86 e6       	ldi	r24, 0x66	; 102
    103c:	96 ee       	ldi	r25, 0xE6	; 230
    103e:	e0 e0       	ldi	r30, 0x00	; 0
    1040:	81 50       	subi	r24, 0x01	; 1
    1042:	90 40       	sbci	r25, 0x00	; 0
    1044:	e0 40       	sbci	r30, 0x00	; 0
    1046:	e1 f7       	brne	.-8      	; 0x1040 <dataVerwerken+0x388>
		_delay_ms(80);
		char final_string20c[20];
		sprintf(final_string20c, "O20c%d\n", aantal20cent);
    1048:	80 91 71 01 	lds	r24, 0x0171	; 0x800171 <aantal20cent+0x1>
    104c:	8f 93       	push	r24
    104e:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <aantal20cent>
    1052:	8f 93       	push	r24
    1054:	84 e2       	ldi	r24, 0x24	; 36
    1056:	91 e0       	ldi	r25, 0x01	; 1
    1058:	9f 93       	push	r25
    105a:	8f 93       	push	r24
    105c:	04 51       	subi	r16, 0x14	; 20
    105e:	11 09       	sbc	r17, r1
    1060:	1f 93       	push	r17
    1062:	0f 93       	push	r16
    1064:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
		USART_Transmit_String(final_string20c);
    1068:	c8 01       	movw	r24, r16
    106a:	0e 94 b6 02 	call	0x56c	; 0x56c <USART_Transmit_String>
    106e:	f6 e6       	ldi	r31, 0x66	; 102
    1070:	26 ee       	ldi	r18, 0xE6	; 230
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	f1 50       	subi	r31, 0x01	; 1
    1076:	20 40       	sbci	r18, 0x00	; 0
    1078:	80 40       	sbci	r24, 0x00	; 0
    107a:	e1 f7       	brne	.-8      	; 0x1074 <dataVerwerken+0x3bc>
		_delay_ms(80);
		char final_string5c[20];
		sprintf(final_string5c, "O5c%d\n", aantal5cent);
    107c:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <aantal5cent+0x1>
    1080:	8f 93       	push	r24
    1082:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <aantal5cent>
    1086:	8f 93       	push	r24
    1088:	8d e1       	ldi	r24, 0x1D	; 29
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	9f 93       	push	r25
    108e:	8f 93       	push	r24
    1090:	04 51       	subi	r16, 0x14	; 20
    1092:	11 09       	sbc	r17, r1
    1094:	1f 93       	push	r17
    1096:	0f 93       	push	r16
    1098:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
		USART_Transmit_String(final_string5c);
    109c:	c8 01       	movw	r24, r16
    109e:	0e 94 b6 02 	call	0x56c	; 0x56c <USART_Transmit_String>
    10a2:	96 e6       	ldi	r25, 0x66	; 102
    10a4:	e6 ee       	ldi	r30, 0xE6	; 230
    10a6:	f0 e0       	ldi	r31, 0x00	; 0
    10a8:	91 50       	subi	r25, 0x01	; 1
    10aa:	e0 40       	sbci	r30, 0x00	; 0
    10ac:	f0 40       	sbci	r31, 0x00	; 0
    10ae:	e1 f7       	brne	.-8      	; 0x10a8 <dataVerwerken+0x3f0>
		_delay_ms(80);
		char final_string10c[20];
		sprintf(final_string10c, "O10c%d\n", aantal10cent);
    10b0:	80 91 73 01 	lds	r24, 0x0173	; 0x800173 <aantal10cent+0x1>
    10b4:	8f 93       	push	r24
    10b6:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <aantal10cent>
    10ba:	8f 93       	push	r24
    10bc:	85 e1       	ldi	r24, 0x15	; 21
    10be:	91 e0       	ldi	r25, 0x01	; 1
    10c0:	9f 93       	push	r25
    10c2:	8f 93       	push	r24
    10c4:	04 51       	subi	r16, 0x14	; 20
    10c6:	11 09       	sbc	r17, r1
    10c8:	1f 93       	push	r17
    10ca:	0f 93       	push	r16
    10cc:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
		USART_Transmit_String(final_string10c);
    10d0:	0f b6       	in	r0, 0x3f	; 63
    10d2:	f8 94       	cli
    10d4:	de bf       	out	0x3e, r29	; 62
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	cd bf       	out	0x3d, r28	; 61
    10da:	c8 01       	movw	r24, r16
    10dc:	0e 94 b6 02 	call	0x56c	; 0x56c <USART_Transmit_String>
		
	}
}
    10e0:	c8 58       	subi	r28, 0x88	; 136
    10e2:	df 4f       	sbci	r29, 0xFF	; 255
    10e4:	0f b6       	in	r0, 0x3f	; 63
    10e6:	f8 94       	cli
    10e8:	de bf       	out	0x3e, r29	; 62
    10ea:	0f be       	out	0x3f, r0	; 63
    10ec:	cd bf       	out	0x3d, r28	; 61
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	1f 91       	pop	r17
    10f4:	0f 91       	pop	r16
    10f6:	ff 90       	pop	r15
    10f8:	ef 90       	pop	r14
    10fa:	08 95       	ret

000010fc <__vector_20>:
ISR(TIMER0_COMPA_vect){
	PORTC &= ~(1<<PORTC5);
}

//Interrupt bij hoog niveau op rx
ISR(USART0_RX_vect) { //Interrupt bij hoog flank van de rx
    10fc:	1f 92       	push	r1
    10fe:	0f 92       	push	r0
    1100:	0f b6       	in	r0, 0x3f	; 63
    1102:	0f 92       	push	r0
    1104:	11 24       	eor	r1, r1
    1106:	2f 93       	push	r18
    1108:	3f 93       	push	r19
    110a:	4f 93       	push	r20
    110c:	5f 93       	push	r21
    110e:	6f 93       	push	r22
    1110:	7f 93       	push	r23
    1112:	8f 93       	push	r24
    1114:	9f 93       	push	r25
    1116:	af 93       	push	r26
    1118:	bf 93       	push	r27
    111a:	ef 93       	push	r30
    111c:	ff 93       	push	r31
	static unsigned int pos = 1;
	rx_buff[pos] = UDR0;
    111e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1122:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1126:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
    112a:	fc 01       	movw	r30, r24
    112c:	ea 58       	subi	r30, 0x8A	; 138
    112e:	fe 4f       	sbci	r31, 0xFE	; 254
    1130:	20 83       	st	Z, r18
	if(rx_buff[pos] == ' '){ //Einde van de data
    1132:	20 32       	cpi	r18, 0x20	; 32
    1134:	61 f4       	brne	.+24     	; 0x114e <__vector_20+0x52>
		rx_buff[pos]='\n';
    1136:	fc 01       	movw	r30, r24
    1138:	ea 58       	subi	r30, 0x8A	; 138
    113a:	fe 4f       	sbci	r31, 0xFE	; 254
    113c:	2a e0       	ldi	r18, 0x0A	; 10
    113e:	20 83       	st	Z, r18
		pos = 0;
    1140:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1144:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		dataVerwerken();
    1148:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <dataVerwerken>
    114c:	05 c0       	rjmp	.+10     	; 0x1158 <__vector_20+0x5c>
	}
	else{
		pos++;
    114e:	01 96       	adiw	r24, 0x01	; 1
    1150:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1154:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
}
    1158:	ff 91       	pop	r31
    115a:	ef 91       	pop	r30
    115c:	bf 91       	pop	r27
    115e:	af 91       	pop	r26
    1160:	9f 91       	pop	r25
    1162:	8f 91       	pop	r24
    1164:	7f 91       	pop	r23
    1166:	6f 91       	pop	r22
    1168:	5f 91       	pop	r21
    116a:	4f 91       	pop	r20
    116c:	3f 91       	pop	r19
    116e:	2f 91       	pop	r18
    1170:	0f 90       	pop	r0
    1172:	0f be       	out	0x3f, r0	; 63
    1174:	0f 90       	pop	r0
    1176:	1f 90       	pop	r1
    1178:	18 95       	reti

0000117a <atoi>:
    117a:	fc 01       	movw	r30, r24
    117c:	88 27       	eor	r24, r24
    117e:	99 27       	eor	r25, r25
    1180:	e8 94       	clt
    1182:	21 91       	ld	r18, Z+
    1184:	20 32       	cpi	r18, 0x20	; 32
    1186:	e9 f3       	breq	.-6      	; 0x1182 <atoi+0x8>
    1188:	29 30       	cpi	r18, 0x09	; 9
    118a:	10 f0       	brcs	.+4      	; 0x1190 <atoi+0x16>
    118c:	2e 30       	cpi	r18, 0x0E	; 14
    118e:	c8 f3       	brcs	.-14     	; 0x1182 <atoi+0x8>
    1190:	2b 32       	cpi	r18, 0x2B	; 43
    1192:	41 f0       	breq	.+16     	; 0x11a4 <atoi+0x2a>
    1194:	2d 32       	cpi	r18, 0x2D	; 45
    1196:	39 f4       	brne	.+14     	; 0x11a6 <atoi+0x2c>
    1198:	68 94       	set
    119a:	04 c0       	rjmp	.+8      	; 0x11a4 <atoi+0x2a>
    119c:	0e 94 ef 08 	call	0x11de	; 0x11de <__mulhi_const_10>
    11a0:	82 0f       	add	r24, r18
    11a2:	91 1d       	adc	r25, r1
    11a4:	21 91       	ld	r18, Z+
    11a6:	20 53       	subi	r18, 0x30	; 48
    11a8:	2a 30       	cpi	r18, 0x0A	; 10
    11aa:	c0 f3       	brcs	.-16     	; 0x119c <atoi+0x22>
    11ac:	1e f4       	brtc	.+6      	; 0x11b4 <atoi+0x3a>
    11ae:	90 95       	com	r25
    11b0:	81 95       	neg	r24
    11b2:	9f 4f       	sbci	r25, 0xFF	; 255
    11b4:	08 95       	ret

000011b6 <strchr>:
    11b6:	fc 01       	movw	r30, r24
    11b8:	81 91       	ld	r24, Z+
    11ba:	86 17       	cp	r24, r22
    11bc:	21 f0       	breq	.+8      	; 0x11c6 <strchr+0x10>
    11be:	88 23       	and	r24, r24
    11c0:	d9 f7       	brne	.-10     	; 0x11b8 <strchr+0x2>
    11c2:	99 27       	eor	r25, r25
    11c4:	08 95       	ret
    11c6:	31 97       	sbiw	r30, 0x01	; 1
    11c8:	cf 01       	movw	r24, r30
    11ca:	08 95       	ret

000011cc <strcmp>:
    11cc:	fb 01       	movw	r30, r22
    11ce:	dc 01       	movw	r26, r24
    11d0:	8d 91       	ld	r24, X+
    11d2:	01 90       	ld	r0, Z+
    11d4:	80 19       	sub	r24, r0
    11d6:	01 10       	cpse	r0, r1
    11d8:	d9 f3       	breq	.-10     	; 0x11d0 <strcmp+0x4>
    11da:	99 0b       	sbc	r25, r25
    11dc:	08 95       	ret

000011de <__mulhi_const_10>:
    11de:	7a e0       	ldi	r23, 0x0A	; 10
    11e0:	97 9f       	mul	r25, r23
    11e2:	90 2d       	mov	r25, r0
    11e4:	87 9f       	mul	r24, r23
    11e6:	80 2d       	mov	r24, r0
    11e8:	91 0d       	add	r25, r1
    11ea:	11 24       	eor	r1, r1
    11ec:	08 95       	ret

000011ee <sprintf>:
    11ee:	ae e0       	ldi	r26, 0x0E	; 14
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	ed ef       	ldi	r30, 0xFD	; 253
    11f4:	f8 e0       	ldi	r31, 0x08	; 8
    11f6:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__prologue_saves__+0x1c>
    11fa:	0d 89       	ldd	r16, Y+21	; 0x15
    11fc:	1e 89       	ldd	r17, Y+22	; 0x16
    11fe:	86 e0       	ldi	r24, 0x06	; 6
    1200:	8c 83       	std	Y+4, r24	; 0x04
    1202:	1a 83       	std	Y+2, r17	; 0x02
    1204:	09 83       	std	Y+1, r16	; 0x01
    1206:	8f ef       	ldi	r24, 0xFF	; 255
    1208:	9f e7       	ldi	r25, 0x7F	; 127
    120a:	9e 83       	std	Y+6, r25	; 0x06
    120c:	8d 83       	std	Y+5, r24	; 0x05
    120e:	ae 01       	movw	r20, r28
    1210:	47 5e       	subi	r20, 0xE7	; 231
    1212:	5f 4f       	sbci	r21, 0xFF	; 255
    1214:	6f 89       	ldd	r22, Y+23	; 0x17
    1216:	78 8d       	ldd	r23, Y+24	; 0x18
    1218:	ce 01       	movw	r24, r28
    121a:	01 96       	adiw	r24, 0x01	; 1
    121c:	0e 94 19 09 	call	0x1232	; 0x1232 <vfprintf>
    1220:	ef 81       	ldd	r30, Y+7	; 0x07
    1222:	f8 85       	ldd	r31, Y+8	; 0x08
    1224:	e0 0f       	add	r30, r16
    1226:	f1 1f       	adc	r31, r17
    1228:	10 82       	st	Z, r1
    122a:	2e 96       	adiw	r28, 0x0e	; 14
    122c:	e4 e0       	ldi	r30, 0x04	; 4
    122e:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__epilogue_restores__+0x1c>

00001232 <vfprintf>:
    1232:	ab e0       	ldi	r26, 0x0B	; 11
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	ef e1       	ldi	r30, 0x1F	; 31
    1238:	f9 e0       	ldi	r31, 0x09	; 9
    123a:	0c 94 aa 0b 	jmp	0x1754	; 0x1754 <__prologue_saves__>
    123e:	6c 01       	movw	r12, r24
    1240:	7b 01       	movw	r14, r22
    1242:	8a 01       	movw	r16, r20
    1244:	fc 01       	movw	r30, r24
    1246:	17 82       	std	Z+7, r1	; 0x07
    1248:	16 82       	std	Z+6, r1	; 0x06
    124a:	83 81       	ldd	r24, Z+3	; 0x03
    124c:	81 ff       	sbrs	r24, 1
    124e:	cc c1       	rjmp	.+920    	; 0x15e8 <vfprintf+0x3b6>
    1250:	ce 01       	movw	r24, r28
    1252:	01 96       	adiw	r24, 0x01	; 1
    1254:	3c 01       	movw	r6, r24
    1256:	f6 01       	movw	r30, r12
    1258:	93 81       	ldd	r25, Z+3	; 0x03
    125a:	f7 01       	movw	r30, r14
    125c:	93 fd       	sbrc	r25, 3
    125e:	85 91       	lpm	r24, Z+
    1260:	93 ff       	sbrs	r25, 3
    1262:	81 91       	ld	r24, Z+
    1264:	7f 01       	movw	r14, r30
    1266:	88 23       	and	r24, r24
    1268:	09 f4       	brne	.+2      	; 0x126c <vfprintf+0x3a>
    126a:	ba c1       	rjmp	.+884    	; 0x15e0 <vfprintf+0x3ae>
    126c:	85 32       	cpi	r24, 0x25	; 37
    126e:	39 f4       	brne	.+14     	; 0x127e <vfprintf+0x4c>
    1270:	93 fd       	sbrc	r25, 3
    1272:	85 91       	lpm	r24, Z+
    1274:	93 ff       	sbrs	r25, 3
    1276:	81 91       	ld	r24, Z+
    1278:	7f 01       	movw	r14, r30
    127a:	85 32       	cpi	r24, 0x25	; 37
    127c:	29 f4       	brne	.+10     	; 0x1288 <vfprintf+0x56>
    127e:	b6 01       	movw	r22, r12
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	0e 94 10 0b 	call	0x1620	; 0x1620 <fputc>
    1286:	e7 cf       	rjmp	.-50     	; 0x1256 <vfprintf+0x24>
    1288:	91 2c       	mov	r9, r1
    128a:	21 2c       	mov	r2, r1
    128c:	31 2c       	mov	r3, r1
    128e:	ff e1       	ldi	r31, 0x1F	; 31
    1290:	f3 15       	cp	r31, r3
    1292:	d8 f0       	brcs	.+54     	; 0x12ca <vfprintf+0x98>
    1294:	8b 32       	cpi	r24, 0x2B	; 43
    1296:	79 f0       	breq	.+30     	; 0x12b6 <vfprintf+0x84>
    1298:	38 f4       	brcc	.+14     	; 0x12a8 <vfprintf+0x76>
    129a:	80 32       	cpi	r24, 0x20	; 32
    129c:	79 f0       	breq	.+30     	; 0x12bc <vfprintf+0x8a>
    129e:	83 32       	cpi	r24, 0x23	; 35
    12a0:	a1 f4       	brne	.+40     	; 0x12ca <vfprintf+0x98>
    12a2:	23 2d       	mov	r18, r3
    12a4:	20 61       	ori	r18, 0x10	; 16
    12a6:	1d c0       	rjmp	.+58     	; 0x12e2 <vfprintf+0xb0>
    12a8:	8d 32       	cpi	r24, 0x2D	; 45
    12aa:	61 f0       	breq	.+24     	; 0x12c4 <vfprintf+0x92>
    12ac:	80 33       	cpi	r24, 0x30	; 48
    12ae:	69 f4       	brne	.+26     	; 0x12ca <vfprintf+0x98>
    12b0:	23 2d       	mov	r18, r3
    12b2:	21 60       	ori	r18, 0x01	; 1
    12b4:	16 c0       	rjmp	.+44     	; 0x12e2 <vfprintf+0xb0>
    12b6:	83 2d       	mov	r24, r3
    12b8:	82 60       	ori	r24, 0x02	; 2
    12ba:	38 2e       	mov	r3, r24
    12bc:	e3 2d       	mov	r30, r3
    12be:	e4 60       	ori	r30, 0x04	; 4
    12c0:	3e 2e       	mov	r3, r30
    12c2:	2a c0       	rjmp	.+84     	; 0x1318 <vfprintf+0xe6>
    12c4:	f3 2d       	mov	r31, r3
    12c6:	f8 60       	ori	r31, 0x08	; 8
    12c8:	1d c0       	rjmp	.+58     	; 0x1304 <vfprintf+0xd2>
    12ca:	37 fc       	sbrc	r3, 7
    12cc:	2d c0       	rjmp	.+90     	; 0x1328 <vfprintf+0xf6>
    12ce:	20 ed       	ldi	r18, 0xD0	; 208
    12d0:	28 0f       	add	r18, r24
    12d2:	2a 30       	cpi	r18, 0x0A	; 10
    12d4:	40 f0       	brcs	.+16     	; 0x12e6 <vfprintf+0xb4>
    12d6:	8e 32       	cpi	r24, 0x2E	; 46
    12d8:	b9 f4       	brne	.+46     	; 0x1308 <vfprintf+0xd6>
    12da:	36 fc       	sbrc	r3, 6
    12dc:	81 c1       	rjmp	.+770    	; 0x15e0 <vfprintf+0x3ae>
    12de:	23 2d       	mov	r18, r3
    12e0:	20 64       	ori	r18, 0x40	; 64
    12e2:	32 2e       	mov	r3, r18
    12e4:	19 c0       	rjmp	.+50     	; 0x1318 <vfprintf+0xe6>
    12e6:	36 fe       	sbrs	r3, 6
    12e8:	06 c0       	rjmp	.+12     	; 0x12f6 <vfprintf+0xc4>
    12ea:	8a e0       	ldi	r24, 0x0A	; 10
    12ec:	98 9e       	mul	r9, r24
    12ee:	20 0d       	add	r18, r0
    12f0:	11 24       	eor	r1, r1
    12f2:	92 2e       	mov	r9, r18
    12f4:	11 c0       	rjmp	.+34     	; 0x1318 <vfprintf+0xe6>
    12f6:	ea e0       	ldi	r30, 0x0A	; 10
    12f8:	2e 9e       	mul	r2, r30
    12fa:	20 0d       	add	r18, r0
    12fc:	11 24       	eor	r1, r1
    12fe:	22 2e       	mov	r2, r18
    1300:	f3 2d       	mov	r31, r3
    1302:	f0 62       	ori	r31, 0x20	; 32
    1304:	3f 2e       	mov	r3, r31
    1306:	08 c0       	rjmp	.+16     	; 0x1318 <vfprintf+0xe6>
    1308:	8c 36       	cpi	r24, 0x6C	; 108
    130a:	21 f4       	brne	.+8      	; 0x1314 <vfprintf+0xe2>
    130c:	83 2d       	mov	r24, r3
    130e:	80 68       	ori	r24, 0x80	; 128
    1310:	38 2e       	mov	r3, r24
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <vfprintf+0xe6>
    1314:	88 36       	cpi	r24, 0x68	; 104
    1316:	41 f4       	brne	.+16     	; 0x1328 <vfprintf+0xf6>
    1318:	f7 01       	movw	r30, r14
    131a:	93 fd       	sbrc	r25, 3
    131c:	85 91       	lpm	r24, Z+
    131e:	93 ff       	sbrs	r25, 3
    1320:	81 91       	ld	r24, Z+
    1322:	7f 01       	movw	r14, r30
    1324:	81 11       	cpse	r24, r1
    1326:	b3 cf       	rjmp	.-154    	; 0x128e <vfprintf+0x5c>
    1328:	98 2f       	mov	r25, r24
    132a:	9f 7d       	andi	r25, 0xDF	; 223
    132c:	95 54       	subi	r25, 0x45	; 69
    132e:	93 30       	cpi	r25, 0x03	; 3
    1330:	28 f4       	brcc	.+10     	; 0x133c <vfprintf+0x10a>
    1332:	0c 5f       	subi	r16, 0xFC	; 252
    1334:	1f 4f       	sbci	r17, 0xFF	; 255
    1336:	9f e3       	ldi	r25, 0x3F	; 63
    1338:	99 83       	std	Y+1, r25	; 0x01
    133a:	0d c0       	rjmp	.+26     	; 0x1356 <vfprintf+0x124>
    133c:	83 36       	cpi	r24, 0x63	; 99
    133e:	31 f0       	breq	.+12     	; 0x134c <vfprintf+0x11a>
    1340:	83 37       	cpi	r24, 0x73	; 115
    1342:	71 f0       	breq	.+28     	; 0x1360 <vfprintf+0x12e>
    1344:	83 35       	cpi	r24, 0x53	; 83
    1346:	09 f0       	breq	.+2      	; 0x134a <vfprintf+0x118>
    1348:	59 c0       	rjmp	.+178    	; 0x13fc <vfprintf+0x1ca>
    134a:	21 c0       	rjmp	.+66     	; 0x138e <vfprintf+0x15c>
    134c:	f8 01       	movw	r30, r16
    134e:	80 81       	ld	r24, Z
    1350:	89 83       	std	Y+1, r24	; 0x01
    1352:	0e 5f       	subi	r16, 0xFE	; 254
    1354:	1f 4f       	sbci	r17, 0xFF	; 255
    1356:	88 24       	eor	r8, r8
    1358:	83 94       	inc	r8
    135a:	91 2c       	mov	r9, r1
    135c:	53 01       	movw	r10, r6
    135e:	13 c0       	rjmp	.+38     	; 0x1386 <vfprintf+0x154>
    1360:	28 01       	movw	r4, r16
    1362:	f2 e0       	ldi	r31, 0x02	; 2
    1364:	4f 0e       	add	r4, r31
    1366:	51 1c       	adc	r5, r1
    1368:	f8 01       	movw	r30, r16
    136a:	a0 80       	ld	r10, Z
    136c:	b1 80       	ldd	r11, Z+1	; 0x01
    136e:	36 fe       	sbrs	r3, 6
    1370:	03 c0       	rjmp	.+6      	; 0x1378 <vfprintf+0x146>
    1372:	69 2d       	mov	r22, r9
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	02 c0       	rjmp	.+4      	; 0x137c <vfprintf+0x14a>
    1378:	6f ef       	ldi	r22, 0xFF	; 255
    137a:	7f ef       	ldi	r23, 0xFF	; 255
    137c:	c5 01       	movw	r24, r10
    137e:	0e 94 05 0b 	call	0x160a	; 0x160a <strnlen>
    1382:	4c 01       	movw	r8, r24
    1384:	82 01       	movw	r16, r4
    1386:	f3 2d       	mov	r31, r3
    1388:	ff 77       	andi	r31, 0x7F	; 127
    138a:	3f 2e       	mov	r3, r31
    138c:	16 c0       	rjmp	.+44     	; 0x13ba <vfprintf+0x188>
    138e:	28 01       	movw	r4, r16
    1390:	22 e0       	ldi	r18, 0x02	; 2
    1392:	42 0e       	add	r4, r18
    1394:	51 1c       	adc	r5, r1
    1396:	f8 01       	movw	r30, r16
    1398:	a0 80       	ld	r10, Z
    139a:	b1 80       	ldd	r11, Z+1	; 0x01
    139c:	36 fe       	sbrs	r3, 6
    139e:	03 c0       	rjmp	.+6      	; 0x13a6 <vfprintf+0x174>
    13a0:	69 2d       	mov	r22, r9
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <vfprintf+0x178>
    13a6:	6f ef       	ldi	r22, 0xFF	; 255
    13a8:	7f ef       	ldi	r23, 0xFF	; 255
    13aa:	c5 01       	movw	r24, r10
    13ac:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <strnlen_P>
    13b0:	4c 01       	movw	r8, r24
    13b2:	f3 2d       	mov	r31, r3
    13b4:	f0 68       	ori	r31, 0x80	; 128
    13b6:	3f 2e       	mov	r3, r31
    13b8:	82 01       	movw	r16, r4
    13ba:	33 fc       	sbrc	r3, 3
    13bc:	1b c0       	rjmp	.+54     	; 0x13f4 <vfprintf+0x1c2>
    13be:	82 2d       	mov	r24, r2
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	88 16       	cp	r8, r24
    13c4:	99 06       	cpc	r9, r25
    13c6:	b0 f4       	brcc	.+44     	; 0x13f4 <vfprintf+0x1c2>
    13c8:	b6 01       	movw	r22, r12
    13ca:	80 e2       	ldi	r24, 0x20	; 32
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	0e 94 10 0b 	call	0x1620	; 0x1620 <fputc>
    13d2:	2a 94       	dec	r2
    13d4:	f4 cf       	rjmp	.-24     	; 0x13be <vfprintf+0x18c>
    13d6:	f5 01       	movw	r30, r10
    13d8:	37 fc       	sbrc	r3, 7
    13da:	85 91       	lpm	r24, Z+
    13dc:	37 fe       	sbrs	r3, 7
    13de:	81 91       	ld	r24, Z+
    13e0:	5f 01       	movw	r10, r30
    13e2:	b6 01       	movw	r22, r12
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	0e 94 10 0b 	call	0x1620	; 0x1620 <fputc>
    13ea:	21 10       	cpse	r2, r1
    13ec:	2a 94       	dec	r2
    13ee:	21 e0       	ldi	r18, 0x01	; 1
    13f0:	82 1a       	sub	r8, r18
    13f2:	91 08       	sbc	r9, r1
    13f4:	81 14       	cp	r8, r1
    13f6:	91 04       	cpc	r9, r1
    13f8:	71 f7       	brne	.-36     	; 0x13d6 <vfprintf+0x1a4>
    13fa:	e8 c0       	rjmp	.+464    	; 0x15cc <vfprintf+0x39a>
    13fc:	84 36       	cpi	r24, 0x64	; 100
    13fe:	11 f0       	breq	.+4      	; 0x1404 <vfprintf+0x1d2>
    1400:	89 36       	cpi	r24, 0x69	; 105
    1402:	41 f5       	brne	.+80     	; 0x1454 <vfprintf+0x222>
    1404:	f8 01       	movw	r30, r16
    1406:	37 fe       	sbrs	r3, 7
    1408:	07 c0       	rjmp	.+14     	; 0x1418 <vfprintf+0x1e6>
    140a:	60 81       	ld	r22, Z
    140c:	71 81       	ldd	r23, Z+1	; 0x01
    140e:	82 81       	ldd	r24, Z+2	; 0x02
    1410:	93 81       	ldd	r25, Z+3	; 0x03
    1412:	0c 5f       	subi	r16, 0xFC	; 252
    1414:	1f 4f       	sbci	r17, 0xFF	; 255
    1416:	08 c0       	rjmp	.+16     	; 0x1428 <vfprintf+0x1f6>
    1418:	60 81       	ld	r22, Z
    141a:	71 81       	ldd	r23, Z+1	; 0x01
    141c:	07 2e       	mov	r0, r23
    141e:	00 0c       	add	r0, r0
    1420:	88 0b       	sbc	r24, r24
    1422:	99 0b       	sbc	r25, r25
    1424:	0e 5f       	subi	r16, 0xFE	; 254
    1426:	1f 4f       	sbci	r17, 0xFF	; 255
    1428:	f3 2d       	mov	r31, r3
    142a:	ff 76       	andi	r31, 0x6F	; 111
    142c:	3f 2e       	mov	r3, r31
    142e:	97 ff       	sbrs	r25, 7
    1430:	09 c0       	rjmp	.+18     	; 0x1444 <vfprintf+0x212>
    1432:	90 95       	com	r25
    1434:	80 95       	com	r24
    1436:	70 95       	com	r23
    1438:	61 95       	neg	r22
    143a:	7f 4f       	sbci	r23, 0xFF	; 255
    143c:	8f 4f       	sbci	r24, 0xFF	; 255
    143e:	9f 4f       	sbci	r25, 0xFF	; 255
    1440:	f0 68       	ori	r31, 0x80	; 128
    1442:	3f 2e       	mov	r3, r31
    1444:	2a e0       	ldi	r18, 0x0A	; 10
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	a3 01       	movw	r20, r6
    144a:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__ultoa_invert>
    144e:	88 2e       	mov	r8, r24
    1450:	86 18       	sub	r8, r6
    1452:	45 c0       	rjmp	.+138    	; 0x14de <vfprintf+0x2ac>
    1454:	85 37       	cpi	r24, 0x75	; 117
    1456:	31 f4       	brne	.+12     	; 0x1464 <vfprintf+0x232>
    1458:	23 2d       	mov	r18, r3
    145a:	2f 7e       	andi	r18, 0xEF	; 239
    145c:	b2 2e       	mov	r11, r18
    145e:	2a e0       	ldi	r18, 0x0A	; 10
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	25 c0       	rjmp	.+74     	; 0x14ae <vfprintf+0x27c>
    1464:	93 2d       	mov	r25, r3
    1466:	99 7f       	andi	r25, 0xF9	; 249
    1468:	b9 2e       	mov	r11, r25
    146a:	8f 36       	cpi	r24, 0x6F	; 111
    146c:	c1 f0       	breq	.+48     	; 0x149e <vfprintf+0x26c>
    146e:	18 f4       	brcc	.+6      	; 0x1476 <vfprintf+0x244>
    1470:	88 35       	cpi	r24, 0x58	; 88
    1472:	79 f0       	breq	.+30     	; 0x1492 <vfprintf+0x260>
    1474:	b5 c0       	rjmp	.+362    	; 0x15e0 <vfprintf+0x3ae>
    1476:	80 37       	cpi	r24, 0x70	; 112
    1478:	19 f0       	breq	.+6      	; 0x1480 <vfprintf+0x24e>
    147a:	88 37       	cpi	r24, 0x78	; 120
    147c:	21 f0       	breq	.+8      	; 0x1486 <vfprintf+0x254>
    147e:	b0 c0       	rjmp	.+352    	; 0x15e0 <vfprintf+0x3ae>
    1480:	e9 2f       	mov	r30, r25
    1482:	e0 61       	ori	r30, 0x10	; 16
    1484:	be 2e       	mov	r11, r30
    1486:	b4 fe       	sbrs	r11, 4
    1488:	0d c0       	rjmp	.+26     	; 0x14a4 <vfprintf+0x272>
    148a:	fb 2d       	mov	r31, r11
    148c:	f4 60       	ori	r31, 0x04	; 4
    148e:	bf 2e       	mov	r11, r31
    1490:	09 c0       	rjmp	.+18     	; 0x14a4 <vfprintf+0x272>
    1492:	34 fe       	sbrs	r3, 4
    1494:	0a c0       	rjmp	.+20     	; 0x14aa <vfprintf+0x278>
    1496:	29 2f       	mov	r18, r25
    1498:	26 60       	ori	r18, 0x06	; 6
    149a:	b2 2e       	mov	r11, r18
    149c:	06 c0       	rjmp	.+12     	; 0x14aa <vfprintf+0x278>
    149e:	28 e0       	ldi	r18, 0x08	; 8
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	05 c0       	rjmp	.+10     	; 0x14ae <vfprintf+0x27c>
    14a4:	20 e1       	ldi	r18, 0x10	; 16
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <vfprintf+0x27c>
    14aa:	20 e1       	ldi	r18, 0x10	; 16
    14ac:	32 e0       	ldi	r19, 0x02	; 2
    14ae:	f8 01       	movw	r30, r16
    14b0:	b7 fe       	sbrs	r11, 7
    14b2:	07 c0       	rjmp	.+14     	; 0x14c2 <vfprintf+0x290>
    14b4:	60 81       	ld	r22, Z
    14b6:	71 81       	ldd	r23, Z+1	; 0x01
    14b8:	82 81       	ldd	r24, Z+2	; 0x02
    14ba:	93 81       	ldd	r25, Z+3	; 0x03
    14bc:	0c 5f       	subi	r16, 0xFC	; 252
    14be:	1f 4f       	sbci	r17, 0xFF	; 255
    14c0:	06 c0       	rjmp	.+12     	; 0x14ce <vfprintf+0x29c>
    14c2:	60 81       	ld	r22, Z
    14c4:	71 81       	ldd	r23, Z+1	; 0x01
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	0e 5f       	subi	r16, 0xFE	; 254
    14cc:	1f 4f       	sbci	r17, 0xFF	; 255
    14ce:	a3 01       	movw	r20, r6
    14d0:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__ultoa_invert>
    14d4:	88 2e       	mov	r8, r24
    14d6:	86 18       	sub	r8, r6
    14d8:	fb 2d       	mov	r31, r11
    14da:	ff 77       	andi	r31, 0x7F	; 127
    14dc:	3f 2e       	mov	r3, r31
    14de:	36 fe       	sbrs	r3, 6
    14e0:	0d c0       	rjmp	.+26     	; 0x14fc <vfprintf+0x2ca>
    14e2:	23 2d       	mov	r18, r3
    14e4:	2e 7f       	andi	r18, 0xFE	; 254
    14e6:	a2 2e       	mov	r10, r18
    14e8:	89 14       	cp	r8, r9
    14ea:	58 f4       	brcc	.+22     	; 0x1502 <vfprintf+0x2d0>
    14ec:	34 fe       	sbrs	r3, 4
    14ee:	0b c0       	rjmp	.+22     	; 0x1506 <vfprintf+0x2d4>
    14f0:	32 fc       	sbrc	r3, 2
    14f2:	09 c0       	rjmp	.+18     	; 0x1506 <vfprintf+0x2d4>
    14f4:	83 2d       	mov	r24, r3
    14f6:	8e 7e       	andi	r24, 0xEE	; 238
    14f8:	a8 2e       	mov	r10, r24
    14fa:	05 c0       	rjmp	.+10     	; 0x1506 <vfprintf+0x2d4>
    14fc:	b8 2c       	mov	r11, r8
    14fe:	a3 2c       	mov	r10, r3
    1500:	03 c0       	rjmp	.+6      	; 0x1508 <vfprintf+0x2d6>
    1502:	b8 2c       	mov	r11, r8
    1504:	01 c0       	rjmp	.+2      	; 0x1508 <vfprintf+0x2d6>
    1506:	b9 2c       	mov	r11, r9
    1508:	a4 fe       	sbrs	r10, 4
    150a:	0f c0       	rjmp	.+30     	; 0x152a <vfprintf+0x2f8>
    150c:	fe 01       	movw	r30, r28
    150e:	e8 0d       	add	r30, r8
    1510:	f1 1d       	adc	r31, r1
    1512:	80 81       	ld	r24, Z
    1514:	80 33       	cpi	r24, 0x30	; 48
    1516:	21 f4       	brne	.+8      	; 0x1520 <vfprintf+0x2ee>
    1518:	9a 2d       	mov	r25, r10
    151a:	99 7e       	andi	r25, 0xE9	; 233
    151c:	a9 2e       	mov	r10, r25
    151e:	09 c0       	rjmp	.+18     	; 0x1532 <vfprintf+0x300>
    1520:	a2 fe       	sbrs	r10, 2
    1522:	06 c0       	rjmp	.+12     	; 0x1530 <vfprintf+0x2fe>
    1524:	b3 94       	inc	r11
    1526:	b3 94       	inc	r11
    1528:	04 c0       	rjmp	.+8      	; 0x1532 <vfprintf+0x300>
    152a:	8a 2d       	mov	r24, r10
    152c:	86 78       	andi	r24, 0x86	; 134
    152e:	09 f0       	breq	.+2      	; 0x1532 <vfprintf+0x300>
    1530:	b3 94       	inc	r11
    1532:	a3 fc       	sbrc	r10, 3
    1534:	11 c0       	rjmp	.+34     	; 0x1558 <vfprintf+0x326>
    1536:	a0 fe       	sbrs	r10, 0
    1538:	06 c0       	rjmp	.+12     	; 0x1546 <vfprintf+0x314>
    153a:	b2 14       	cp	r11, r2
    153c:	88 f4       	brcc	.+34     	; 0x1560 <vfprintf+0x32e>
    153e:	28 0c       	add	r2, r8
    1540:	92 2c       	mov	r9, r2
    1542:	9b 18       	sub	r9, r11
    1544:	0e c0       	rjmp	.+28     	; 0x1562 <vfprintf+0x330>
    1546:	b2 14       	cp	r11, r2
    1548:	60 f4       	brcc	.+24     	; 0x1562 <vfprintf+0x330>
    154a:	b6 01       	movw	r22, r12
    154c:	80 e2       	ldi	r24, 0x20	; 32
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	0e 94 10 0b 	call	0x1620	; 0x1620 <fputc>
    1554:	b3 94       	inc	r11
    1556:	f7 cf       	rjmp	.-18     	; 0x1546 <vfprintf+0x314>
    1558:	b2 14       	cp	r11, r2
    155a:	18 f4       	brcc	.+6      	; 0x1562 <vfprintf+0x330>
    155c:	2b 18       	sub	r2, r11
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <vfprintf+0x332>
    1560:	98 2c       	mov	r9, r8
    1562:	21 2c       	mov	r2, r1
    1564:	a4 fe       	sbrs	r10, 4
    1566:	10 c0       	rjmp	.+32     	; 0x1588 <vfprintf+0x356>
    1568:	b6 01       	movw	r22, r12
    156a:	80 e3       	ldi	r24, 0x30	; 48
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	0e 94 10 0b 	call	0x1620	; 0x1620 <fputc>
    1572:	a2 fe       	sbrs	r10, 2
    1574:	17 c0       	rjmp	.+46     	; 0x15a4 <vfprintf+0x372>
    1576:	a1 fc       	sbrc	r10, 1
    1578:	03 c0       	rjmp	.+6      	; 0x1580 <vfprintf+0x34e>
    157a:	88 e7       	ldi	r24, 0x78	; 120
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <vfprintf+0x352>
    1580:	88 e5       	ldi	r24, 0x58	; 88
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	b6 01       	movw	r22, r12
    1586:	0c c0       	rjmp	.+24     	; 0x15a0 <vfprintf+0x36e>
    1588:	8a 2d       	mov	r24, r10
    158a:	86 78       	andi	r24, 0x86	; 134
    158c:	59 f0       	breq	.+22     	; 0x15a4 <vfprintf+0x372>
    158e:	a1 fe       	sbrs	r10, 1
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <vfprintf+0x364>
    1592:	8b e2       	ldi	r24, 0x2B	; 43
    1594:	01 c0       	rjmp	.+2      	; 0x1598 <vfprintf+0x366>
    1596:	80 e2       	ldi	r24, 0x20	; 32
    1598:	a7 fc       	sbrc	r10, 7
    159a:	8d e2       	ldi	r24, 0x2D	; 45
    159c:	b6 01       	movw	r22, r12
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	0e 94 10 0b 	call	0x1620	; 0x1620 <fputc>
    15a4:	89 14       	cp	r8, r9
    15a6:	38 f4       	brcc	.+14     	; 0x15b6 <vfprintf+0x384>
    15a8:	b6 01       	movw	r22, r12
    15aa:	80 e3       	ldi	r24, 0x30	; 48
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	0e 94 10 0b 	call	0x1620	; 0x1620 <fputc>
    15b2:	9a 94       	dec	r9
    15b4:	f7 cf       	rjmp	.-18     	; 0x15a4 <vfprintf+0x372>
    15b6:	8a 94       	dec	r8
    15b8:	f3 01       	movw	r30, r6
    15ba:	e8 0d       	add	r30, r8
    15bc:	f1 1d       	adc	r31, r1
    15be:	80 81       	ld	r24, Z
    15c0:	b6 01       	movw	r22, r12
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	0e 94 10 0b 	call	0x1620	; 0x1620 <fputc>
    15c8:	81 10       	cpse	r8, r1
    15ca:	f5 cf       	rjmp	.-22     	; 0x15b6 <vfprintf+0x384>
    15cc:	22 20       	and	r2, r2
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <vfprintf+0x3a0>
    15d0:	42 ce       	rjmp	.-892    	; 0x1256 <vfprintf+0x24>
    15d2:	b6 01       	movw	r22, r12
    15d4:	80 e2       	ldi	r24, 0x20	; 32
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	0e 94 10 0b 	call	0x1620	; 0x1620 <fputc>
    15dc:	2a 94       	dec	r2
    15de:	f6 cf       	rjmp	.-20     	; 0x15cc <vfprintf+0x39a>
    15e0:	f6 01       	movw	r30, r12
    15e2:	86 81       	ldd	r24, Z+6	; 0x06
    15e4:	97 81       	ldd	r25, Z+7	; 0x07
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <vfprintf+0x3ba>
    15e8:	8f ef       	ldi	r24, 0xFF	; 255
    15ea:	9f ef       	ldi	r25, 0xFF	; 255
    15ec:	2b 96       	adiw	r28, 0x0b	; 11
    15ee:	e2 e1       	ldi	r30, 0x12	; 18
    15f0:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__epilogue_restores__>

000015f4 <strnlen_P>:
    15f4:	fc 01       	movw	r30, r24
    15f6:	05 90       	lpm	r0, Z+
    15f8:	61 50       	subi	r22, 0x01	; 1
    15fa:	70 40       	sbci	r23, 0x00	; 0
    15fc:	01 10       	cpse	r0, r1
    15fe:	d8 f7       	brcc	.-10     	; 0x15f6 <strnlen_P+0x2>
    1600:	80 95       	com	r24
    1602:	90 95       	com	r25
    1604:	8e 0f       	add	r24, r30
    1606:	9f 1f       	adc	r25, r31
    1608:	08 95       	ret

0000160a <strnlen>:
    160a:	fc 01       	movw	r30, r24
    160c:	61 50       	subi	r22, 0x01	; 1
    160e:	70 40       	sbci	r23, 0x00	; 0
    1610:	01 90       	ld	r0, Z+
    1612:	01 10       	cpse	r0, r1
    1614:	d8 f7       	brcc	.-10     	; 0x160c <strnlen+0x2>
    1616:	80 95       	com	r24
    1618:	90 95       	com	r25
    161a:	8e 0f       	add	r24, r30
    161c:	9f 1f       	adc	r25, r31
    161e:	08 95       	ret

00001620 <fputc>:
    1620:	0f 93       	push	r16
    1622:	1f 93       	push	r17
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	fb 01       	movw	r30, r22
    162a:	23 81       	ldd	r18, Z+3	; 0x03
    162c:	21 fd       	sbrc	r18, 1
    162e:	03 c0       	rjmp	.+6      	; 0x1636 <fputc+0x16>
    1630:	8f ef       	ldi	r24, 0xFF	; 255
    1632:	9f ef       	ldi	r25, 0xFF	; 255
    1634:	2c c0       	rjmp	.+88     	; 0x168e <fputc+0x6e>
    1636:	22 ff       	sbrs	r18, 2
    1638:	16 c0       	rjmp	.+44     	; 0x1666 <fputc+0x46>
    163a:	46 81       	ldd	r20, Z+6	; 0x06
    163c:	57 81       	ldd	r21, Z+7	; 0x07
    163e:	24 81       	ldd	r18, Z+4	; 0x04
    1640:	35 81       	ldd	r19, Z+5	; 0x05
    1642:	42 17       	cp	r20, r18
    1644:	53 07       	cpc	r21, r19
    1646:	44 f4       	brge	.+16     	; 0x1658 <fputc+0x38>
    1648:	a0 81       	ld	r26, Z
    164a:	b1 81       	ldd	r27, Z+1	; 0x01
    164c:	9d 01       	movw	r18, r26
    164e:	2f 5f       	subi	r18, 0xFF	; 255
    1650:	3f 4f       	sbci	r19, 0xFF	; 255
    1652:	31 83       	std	Z+1, r19	; 0x01
    1654:	20 83       	st	Z, r18
    1656:	8c 93       	st	X, r24
    1658:	26 81       	ldd	r18, Z+6	; 0x06
    165a:	37 81       	ldd	r19, Z+7	; 0x07
    165c:	2f 5f       	subi	r18, 0xFF	; 255
    165e:	3f 4f       	sbci	r19, 0xFF	; 255
    1660:	37 83       	std	Z+7, r19	; 0x07
    1662:	26 83       	std	Z+6, r18	; 0x06
    1664:	14 c0       	rjmp	.+40     	; 0x168e <fputc+0x6e>
    1666:	8b 01       	movw	r16, r22
    1668:	ec 01       	movw	r28, r24
    166a:	fb 01       	movw	r30, r22
    166c:	00 84       	ldd	r0, Z+8	; 0x08
    166e:	f1 85       	ldd	r31, Z+9	; 0x09
    1670:	e0 2d       	mov	r30, r0
    1672:	09 95       	icall
    1674:	89 2b       	or	r24, r25
    1676:	e1 f6       	brne	.-72     	; 0x1630 <fputc+0x10>
    1678:	d8 01       	movw	r26, r16
    167a:	16 96       	adiw	r26, 0x06	; 6
    167c:	8d 91       	ld	r24, X+
    167e:	9c 91       	ld	r25, X
    1680:	17 97       	sbiw	r26, 0x07	; 7
    1682:	01 96       	adiw	r24, 0x01	; 1
    1684:	17 96       	adiw	r26, 0x07	; 7
    1686:	9c 93       	st	X, r25
    1688:	8e 93       	st	-X, r24
    168a:	16 97       	sbiw	r26, 0x06	; 6
    168c:	ce 01       	movw	r24, r28
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	08 95       	ret

00001698 <__ultoa_invert>:
    1698:	fa 01       	movw	r30, r20
    169a:	aa 27       	eor	r26, r26
    169c:	28 30       	cpi	r18, 0x08	; 8
    169e:	51 f1       	breq	.+84     	; 0x16f4 <__ultoa_invert+0x5c>
    16a0:	20 31       	cpi	r18, 0x10	; 16
    16a2:	81 f1       	breq	.+96     	; 0x1704 <__ultoa_invert+0x6c>
    16a4:	e8 94       	clt
    16a6:	6f 93       	push	r22
    16a8:	6e 7f       	andi	r22, 0xFE	; 254
    16aa:	6e 5f       	subi	r22, 0xFE	; 254
    16ac:	7f 4f       	sbci	r23, 0xFF	; 255
    16ae:	8f 4f       	sbci	r24, 0xFF	; 255
    16b0:	9f 4f       	sbci	r25, 0xFF	; 255
    16b2:	af 4f       	sbci	r26, 0xFF	; 255
    16b4:	b1 e0       	ldi	r27, 0x01	; 1
    16b6:	3e d0       	rcall	.+124    	; 0x1734 <__ultoa_invert+0x9c>
    16b8:	b4 e0       	ldi	r27, 0x04	; 4
    16ba:	3c d0       	rcall	.+120    	; 0x1734 <__ultoa_invert+0x9c>
    16bc:	67 0f       	add	r22, r23
    16be:	78 1f       	adc	r23, r24
    16c0:	89 1f       	adc	r24, r25
    16c2:	9a 1f       	adc	r25, r26
    16c4:	a1 1d       	adc	r26, r1
    16c6:	68 0f       	add	r22, r24
    16c8:	79 1f       	adc	r23, r25
    16ca:	8a 1f       	adc	r24, r26
    16cc:	91 1d       	adc	r25, r1
    16ce:	a1 1d       	adc	r26, r1
    16d0:	6a 0f       	add	r22, r26
    16d2:	71 1d       	adc	r23, r1
    16d4:	81 1d       	adc	r24, r1
    16d6:	91 1d       	adc	r25, r1
    16d8:	a1 1d       	adc	r26, r1
    16da:	20 d0       	rcall	.+64     	; 0x171c <__ultoa_invert+0x84>
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <__ultoa_invert+0x48>
    16de:	68 94       	set
    16e0:	3f 91       	pop	r19
    16e2:	2a e0       	ldi	r18, 0x0A	; 10
    16e4:	26 9f       	mul	r18, r22
    16e6:	11 24       	eor	r1, r1
    16e8:	30 19       	sub	r19, r0
    16ea:	30 5d       	subi	r19, 0xD0	; 208
    16ec:	31 93       	st	Z+, r19
    16ee:	de f6       	brtc	.-74     	; 0x16a6 <__ultoa_invert+0xe>
    16f0:	cf 01       	movw	r24, r30
    16f2:	08 95       	ret
    16f4:	46 2f       	mov	r20, r22
    16f6:	47 70       	andi	r20, 0x07	; 7
    16f8:	40 5d       	subi	r20, 0xD0	; 208
    16fa:	41 93       	st	Z+, r20
    16fc:	b3 e0       	ldi	r27, 0x03	; 3
    16fe:	0f d0       	rcall	.+30     	; 0x171e <__ultoa_invert+0x86>
    1700:	c9 f7       	brne	.-14     	; 0x16f4 <__ultoa_invert+0x5c>
    1702:	f6 cf       	rjmp	.-20     	; 0x16f0 <__ultoa_invert+0x58>
    1704:	46 2f       	mov	r20, r22
    1706:	4f 70       	andi	r20, 0x0F	; 15
    1708:	40 5d       	subi	r20, 0xD0	; 208
    170a:	4a 33       	cpi	r20, 0x3A	; 58
    170c:	18 f0       	brcs	.+6      	; 0x1714 <__ultoa_invert+0x7c>
    170e:	49 5d       	subi	r20, 0xD9	; 217
    1710:	31 fd       	sbrc	r19, 1
    1712:	40 52       	subi	r20, 0x20	; 32
    1714:	41 93       	st	Z+, r20
    1716:	02 d0       	rcall	.+4      	; 0x171c <__ultoa_invert+0x84>
    1718:	a9 f7       	brne	.-22     	; 0x1704 <__ultoa_invert+0x6c>
    171a:	ea cf       	rjmp	.-44     	; 0x16f0 <__ultoa_invert+0x58>
    171c:	b4 e0       	ldi	r27, 0x04	; 4
    171e:	a6 95       	lsr	r26
    1720:	97 95       	ror	r25
    1722:	87 95       	ror	r24
    1724:	77 95       	ror	r23
    1726:	67 95       	ror	r22
    1728:	ba 95       	dec	r27
    172a:	c9 f7       	brne	.-14     	; 0x171e <__ultoa_invert+0x86>
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	61 05       	cpc	r22, r1
    1730:	71 05       	cpc	r23, r1
    1732:	08 95       	ret
    1734:	9b 01       	movw	r18, r22
    1736:	ac 01       	movw	r20, r24
    1738:	0a 2e       	mov	r0, r26
    173a:	06 94       	lsr	r0
    173c:	57 95       	ror	r21
    173e:	47 95       	ror	r20
    1740:	37 95       	ror	r19
    1742:	27 95       	ror	r18
    1744:	ba 95       	dec	r27
    1746:	c9 f7       	brne	.-14     	; 0x173a <__ultoa_invert+0xa2>
    1748:	62 0f       	add	r22, r18
    174a:	73 1f       	adc	r23, r19
    174c:	84 1f       	adc	r24, r20
    174e:	95 1f       	adc	r25, r21
    1750:	a0 1d       	adc	r26, r0
    1752:	08 95       	ret

00001754 <__prologue_saves__>:
    1754:	2f 92       	push	r2
    1756:	3f 92       	push	r3
    1758:	4f 92       	push	r4
    175a:	5f 92       	push	r5
    175c:	6f 92       	push	r6
    175e:	7f 92       	push	r7
    1760:	8f 92       	push	r8
    1762:	9f 92       	push	r9
    1764:	af 92       	push	r10
    1766:	bf 92       	push	r11
    1768:	cf 92       	push	r12
    176a:	df 92       	push	r13
    176c:	ef 92       	push	r14
    176e:	ff 92       	push	r15
    1770:	0f 93       	push	r16
    1772:	1f 93       	push	r17
    1774:	cf 93       	push	r28
    1776:	df 93       	push	r29
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	ca 1b       	sub	r28, r26
    177e:	db 0b       	sbc	r29, r27
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	f8 94       	cli
    1784:	de bf       	out	0x3e, r29	; 62
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	cd bf       	out	0x3d, r28	; 61
    178a:	09 94       	ijmp

0000178c <__epilogue_restores__>:
    178c:	2a 88       	ldd	r2, Y+18	; 0x12
    178e:	39 88       	ldd	r3, Y+17	; 0x11
    1790:	48 88       	ldd	r4, Y+16	; 0x10
    1792:	5f 84       	ldd	r5, Y+15	; 0x0f
    1794:	6e 84       	ldd	r6, Y+14	; 0x0e
    1796:	7d 84       	ldd	r7, Y+13	; 0x0d
    1798:	8c 84       	ldd	r8, Y+12	; 0x0c
    179a:	9b 84       	ldd	r9, Y+11	; 0x0b
    179c:	aa 84       	ldd	r10, Y+10	; 0x0a
    179e:	b9 84       	ldd	r11, Y+9	; 0x09
    17a0:	c8 84       	ldd	r12, Y+8	; 0x08
    17a2:	df 80       	ldd	r13, Y+7	; 0x07
    17a4:	ee 80       	ldd	r14, Y+6	; 0x06
    17a6:	fd 80       	ldd	r15, Y+5	; 0x05
    17a8:	0c 81       	ldd	r16, Y+4	; 0x04
    17aa:	1b 81       	ldd	r17, Y+3	; 0x03
    17ac:	aa 81       	ldd	r26, Y+2	; 0x02
    17ae:	b9 81       	ldd	r27, Y+1	; 0x01
    17b0:	ce 0f       	add	r28, r30
    17b2:	d1 1d       	adc	r29, r1
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	f8 94       	cli
    17b8:	de bf       	out	0x3e, r29	; 62
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	cd bf       	out	0x3d, r28	; 61
    17be:	ed 01       	movw	r28, r26
    17c0:	08 95       	ret

000017c2 <_exit>:
    17c2:	f8 94       	cli

000017c4 <__stop_program>:
    17c4:	ff cf       	rjmp	.-2      	; 0x17c4 <__stop_program>
