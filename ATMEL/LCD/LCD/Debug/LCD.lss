
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000274  00000308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000274  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800112  00800112  0000031a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000031a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000034c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d8a  00000000  00000000  000003dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000084d  00000000  00000000  00001166  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000491  00000000  00000000  000019b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a4  00000000  00000000  00001e44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044a  00000000  00000000  00001ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000051e  00000000  00000000  00002332  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002850  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e4 e7       	ldi	r30, 0x74	; 116
  90:	f2 e0       	ldi	r31, 0x02	; 2
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	a2 31       	cpi	r26, 0x12	; 18
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
  9e:	21 e0       	ldi	r18, 0x01	; 1
  a0:	a2 e1       	ldi	r26, 0x12	; 18
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a5 31       	cpi	r26, 0x15	; 21
  aa:	b2 07       	cpc	r27, r18
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 ee 00 	call	0x1dc	; 0x1dc <main>
  b2:	0c 94 38 01 	jmp	0x270	; 0x270 <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <LCD_Command>:
	if (row == 0 && pos<16)
	LCD_Command((pos & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (row == 1 && pos<16)
	LCD_Command((pos & 0x0F)|0xC0);	/* Command of first row and required position<16 */
	LCD_String(str);		/* Call LCD string function */
}
  ba:	95 b1       	in	r25, 0x05	; 5
  bc:	9f 70       	andi	r25, 0x0F	; 15
  be:	28 2f       	mov	r18, r24
  c0:	20 7f       	andi	r18, 0xF0	; 240
  c2:	92 2b       	or	r25, r18
  c4:	95 b9       	out	0x05, r25	; 5
  c6:	95 b1       	in	r25, 0x05	; 5
  c8:	9e 7f       	andi	r25, 0xFE	; 254
  ca:	95 b9       	out	0x05, r25	; 5
  cc:	95 b1       	in	r25, 0x05	; 5
  ce:	92 60       	ori	r25, 0x02	; 2
  d0:	95 b9       	out	0x05, r25	; 5
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_Command+0x1a>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <LCD_Command+0x1c>
  d6:	95 b1       	in	r25, 0x05	; 5
  d8:	9d 7f       	andi	r25, 0xFD	; 253
  da:	95 b9       	out	0x05, r25	; 5
  dc:	36 ef       	ldi	r19, 0xF6	; 246
  de:	3a 95       	dec	r19
  e0:	f1 f7       	brne	.-4      	; 0xde <LCD_Command+0x24>
  e2:	25 b1       	in	r18, 0x05	; 5
  e4:	30 e1       	ldi	r19, 0x10	; 16
  e6:	83 9f       	mul	r24, r19
  e8:	c0 01       	movw	r24, r0
  ea:	11 24       	eor	r1, r1
  ec:	92 2f       	mov	r25, r18
  ee:	9f 70       	andi	r25, 0x0F	; 15
  f0:	89 2b       	or	r24, r25
  f2:	85 b9       	out	0x05, r24	; 5
  f4:	85 b1       	in	r24, 0x05	; 5
  f6:	82 60       	ori	r24, 0x02	; 2
  f8:	85 b9       	out	0x05, r24	; 5
  fa:	00 c0       	rjmp	.+0      	; 0xfc <LCD_Command+0x42>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <LCD_Command+0x44>
  fe:	85 b1       	in	r24, 0x05	; 5
 100:	8d 7f       	andi	r24, 0xFD	; 253
 102:	85 b9       	out	0x05, r24	; 5
 104:	83 e3       	ldi	r24, 0x33	; 51
 106:	97 e0       	ldi	r25, 0x07	; 7
 108:	01 97       	sbiw	r24, 0x01	; 1
 10a:	f1 f7       	brne	.-4      	; 0x108 <LCD_Command+0x4e>
 10c:	08 95       	ret

0000010e <LCD_Char>:
 10e:	95 b1       	in	r25, 0x05	; 5
 110:	9f 70       	andi	r25, 0x0F	; 15
 112:	28 2f       	mov	r18, r24
 114:	20 7f       	andi	r18, 0xF0	; 240
 116:	92 2b       	or	r25, r18
 118:	95 b9       	out	0x05, r25	; 5
 11a:	95 b1       	in	r25, 0x05	; 5
 11c:	91 60       	ori	r25, 0x01	; 1
 11e:	95 b9       	out	0x05, r25	; 5
 120:	95 b1       	in	r25, 0x05	; 5
 122:	92 60       	ori	r25, 0x02	; 2
 124:	95 b9       	out	0x05, r25	; 5
 126:	00 c0       	rjmp	.+0      	; 0x128 <LCD_Char+0x1a>
 128:	00 c0       	rjmp	.+0      	; 0x12a <LCD_Char+0x1c>
 12a:	95 b1       	in	r25, 0x05	; 5
 12c:	9d 7f       	andi	r25, 0xFD	; 253
 12e:	95 b9       	out	0x05, r25	; 5
 130:	36 ef       	ldi	r19, 0xF6	; 246
 132:	3a 95       	dec	r19
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_Char+0x24>
 136:	25 b1       	in	r18, 0x05	; 5
 138:	30 e1       	ldi	r19, 0x10	; 16
 13a:	83 9f       	mul	r24, r19
 13c:	c0 01       	movw	r24, r0
 13e:	11 24       	eor	r1, r1
 140:	92 2f       	mov	r25, r18
 142:	9f 70       	andi	r25, 0x0F	; 15
 144:	89 2b       	or	r24, r25
 146:	85 b9       	out	0x05, r24	; 5
 148:	85 b1       	in	r24, 0x05	; 5
 14a:	82 60       	ori	r24, 0x02	; 2
 14c:	85 b9       	out	0x05, r24	; 5
 14e:	00 c0       	rjmp	.+0      	; 0x150 <LCD_Char+0x42>
 150:	00 c0       	rjmp	.+0      	; 0x152 <LCD_Char+0x44>
 152:	85 b1       	in	r24, 0x05	; 5
 154:	8d 7f       	andi	r24, 0xFD	; 253
 156:	85 b9       	out	0x05, r24	; 5
 158:	83 e3       	ldi	r24, 0x33	; 51
 15a:	97 e0       	ldi	r25, 0x07	; 7
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	f1 f7       	brne	.-4      	; 0x15c <LCD_Char+0x4e>
 160:	08 95       	ret

00000162 <LCD_Init>:
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	84 b9       	out	0x04, r24	; 4
 166:	8f ef       	ldi	r24, 0xFF	; 255
 168:	97 e4       	ldi	r25, 0x47	; 71
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCD_Init+0x8>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCD_Init+0xe>
 170:	00 00       	nop
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	0e 94 5d 00 	call	0xba	; 0xba <LCD_Command>
 178:	88 e2       	ldi	r24, 0x28	; 40
 17a:	0e 94 5d 00 	call	0xba	; 0xba <LCD_Command>
 17e:	8c e0       	ldi	r24, 0x0C	; 12
 180:	0e 94 5d 00 	call	0xba	; 0xba <LCD_Command>
 184:	86 e0       	ldi	r24, 0x06	; 6
 186:	0e 94 5d 00 	call	0xba	; 0xba <LCD_Command>
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	0e 94 5d 00 	call	0xba	; 0xba <LCD_Command>
 190:	83 e3       	ldi	r24, 0x33	; 51
 192:	97 e0       	ldi	r25, 0x07	; 7
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <LCD_Init+0x32>
 198:	08 95       	ret

0000019a <LCD_String>:
 19a:	0f 93       	push	r16
 19c:	1f 93       	push	r17
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	8c 01       	movw	r16, r24
 1a4:	c0 e0       	ldi	r28, 0x00	; 0
 1a6:	d0 e0       	ldi	r29, 0x00	; 0
 1a8:	03 c0       	rjmp	.+6      	; 0x1b0 <LCD_String+0x16>
 1aa:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_Char>
 1ae:	21 96       	adiw	r28, 0x01	; 1
 1b0:	f8 01       	movw	r30, r16
 1b2:	ec 0f       	add	r30, r28
 1b4:	fd 1f       	adc	r31, r29
 1b6:	80 81       	ld	r24, Z
 1b8:	81 11       	cpse	r24, r1
 1ba:	f7 cf       	rjmp	.-18     	; 0x1aa <LCD_String+0x10>
 1bc:	df 91       	pop	r29
 1be:	cf 91       	pop	r28
 1c0:	1f 91       	pop	r17
 1c2:	0f 91       	pop	r16
 1c4:	08 95       	ret

000001c6 <LCD_Clear>:

void LCD_Clear()
{
	LCD_Command (0x01);		/* Clear display */
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	0e 94 5d 00 	call	0xba	; 0xba <LCD_Command>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1cc:	83 e3       	ldi	r24, 0x33	; 51
 1ce:	97 e0       	ldi	r25, 0x07	; 7
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <LCD_Clear+0xa>
	_delay_ms(2);
	LCD_Command (0x80);		/* Cursor at home position */
 1d4:	80 e8       	ldi	r24, 0x80	; 128
 1d6:	0e 94 5d 00 	call	0xba	; 0xba <LCD_Command>
 1da:	08 95       	ret

000001dc <main>:

char coins = 0;
static int once = 0;
int main()
{
	DDRA &= ~(1<<DDRA7);
 1dc:	81 b1       	in	r24, 0x01	; 1
 1de:	8f 77       	andi	r24, 0x7F	; 127
 1e0:	81 b9       	out	0x01, r24	; 1
	DDRC = 0xFF;
 1e2:	8f ef       	ldi	r24, 0xFF	; 255
 1e4:	87 b9       	out	0x07, r24	; 7
	
	LCD_Init();			/* Initialization of LCD*/
 1e6:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_Init>

	LCD_String("Gip Tiebe");	/* Write string on 1st line of LCD*/
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_String>
	LCD_Command(0xC0);		/* Go to 2nd line*/
 1f2:	80 ec       	ldi	r24, 0xC0	; 192
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	0e 94 5d 00 	call	0xba	; 0xba <LCD_Command>
	LCD_String("Coins: ");	/* Write string on 2nd line*/
 1fa:	8a e0       	ldi	r24, 0x0A	; 10
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_String>
	LCD_Char(coins + 0x30);
 202:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <coins>
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	c0 96       	adiw	r24, 0x30	; 48
 20a:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_Char>
	
	while(1){
		
	if(PINA&(1<<PINA7)){
 20e:	07 9b       	sbis	0x00, 7	; 0
 210:	0e c0       	rjmp	.+28     	; 0x22e <main+0x52>
 212:	8f ef       	ldi	r24, 0xFF	; 255
 214:	95 e3       	ldi	r25, 0x35	; 53
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <main+0x3a>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <main+0x40>
 21c:	00 00       	nop
		_delay_ms(15);
		PORTC &= ~(1<<PORTC0);
 21e:	88 b1       	in	r24, 0x08	; 8
 220:	8e 7f       	andi	r24, 0xFE	; 254
 222:	88 b9       	out	0x08, r24	; 8
		once = 0;
 224:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <__data_end+0x1>
 228:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <__data_end>
 22c:	f0 cf       	rjmp	.-32     	; 0x20e <main+0x32>
	}
	else{
		PORTC |= (1<<PORTC0);
 22e:	88 b1       	in	r24, 0x08	; 8
 230:	81 60       	ori	r24, 0x01	; 1
 232:	88 b9       	out	0x08, r24	; 8
		if(once != 1){
 234:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <__data_end>
 238:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <__data_end+0x1>
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	89 f0       	breq	.+34     	; 0x262 <main+0x86>
			coins++;
 240:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <coins>
 244:	8f 5f       	subi	r24, 0xFF	; 255
 246:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <coins>
			LCD_Clear();
 24a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <LCD_Clear>
			LCD_String("Coins: ");	/* Write string on 2nd line*/
 24e:	8a e0       	ldi	r24, 0x0A	; 10
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	0e 94 cd 00 	call	0x19a	; 0x19a <LCD_String>
			LCD_Char(coins + 0x30);
 256:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <coins>
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	c0 96       	adiw	r24, 0x30	; 48
 25e:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_Char>
		}
		once = 1;
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 26a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 26e:	cf cf       	rjmp	.-98     	; 0x20e <main+0x32>

00000270 <_exit>:
 270:	f8 94       	cli

00000272 <__stop_program>:
 272:	ff cf       	rjmp	.-2      	; 0x272 <__stop_program>
