
74HC165.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000124  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008f6  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000079c  00000000  00000000  00000b0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000030e  00000000  00000000  000012aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000015b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041c  00000000  00000000  000015fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d2  00000000  00000000  00001a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001aea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  8c:	0c 94 90 00 	jmp	0x120	; 0x120 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <clockPuls>:

}
}

void clockPuls(){
	PORTC |= (1<<PORTC1);
  94:	88 b1       	in	r24, 0x08	; 8
  96:	82 60       	ori	r24, 0x02	; 2
  98:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9a:	8f ef       	ldi	r24, 0xFF	; 255
  9c:	95 e3       	ldi	r25, 0x35	; 53
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <clockPuls+0xa>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <clockPuls+0x10>
  a4:	00 00       	nop
	_delay_ms(15);
	PORTC &= ~(1<<PORTC5);
  a6:	88 b1       	in	r24, 0x08	; 8
  a8:	8f 7d       	andi	r24, 0xDF	; 223
  aa:	88 b9       	out	0x08, r24	; 8
  ac:	08 95       	ret

000000ae <load>:
}
void load(){
	PORTC &= ~(1<<PORTC2);
  ae:	88 b1       	in	r24, 0x08	; 8
  b0:	8b 7f       	andi	r24, 0xFB	; 251
  b2:	88 b9       	out	0x08, r24	; 8
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	95 e3       	ldi	r25, 0x35	; 53
  b8:	01 97       	sbiw	r24, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <load+0xa>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <load+0x10>
  be:	00 00       	nop
	_delay_ms(15);
	PORTC |= (1<<PORTC2);
  c0:	88 b1       	in	r24, 0x08	; 8
  c2:	84 60       	ori	r24, 0x04	; 4
  c4:	88 b9       	out	0x08, r24	; 8
  c6:	08 95       	ret

000000c8 <main>:
#include <util/delay.h>

int main(void)
{

DDRC |= ((1<<DDRC1)|(1<<DDRC2)|(1<<DDRC5));
  c8:	87 b1       	in	r24, 0x07	; 7
  ca:	86 62       	ori	r24, 0x26	; 38
  cc:	87 b9       	out	0x07, r24	; 7
DDRD &= ~(1<<DDRD1);
  ce:	8a b1       	in	r24, 0x0a	; 10
  d0:	8d 7f       	andi	r24, 0xFD	; 253
  d2:	8a b9       	out	0x0a, r24	; 10

PORTC &= ~(1<<PORTC5);
  d4:	88 b1       	in	r24, 0x08	; 8
  d6:	8f 7d       	andi	r24, 0xDF	; 223
  d8:	88 b9       	out	0x08, r24	; 8

DDRA = 0;
  da:	11 b8       	out	0x01, r1	; 1
load();
  dc:	0e 94 57 00 	call	0xae	; 0xae <load>

while (1)
{


if(PIND&(1<<PIND1)){
  e0:	49 9b       	sbis	0x09, 1	; 9
  e2:	04 c0       	rjmp	.+8      	; 0xec <main+0x24>
PORTC |= (1<<PORTC5);
  e4:	88 b1       	in	r24, 0x08	; 8
  e6:	80 62       	ori	r24, 0x20	; 32
  e8:	88 b9       	out	0x08, r24	; 8
  ea:	03 c0       	rjmp	.+6      	; 0xf2 <main+0x2a>
}
else{
PORTC &= ~(1<<PORTC5);
  ec:	88 b1       	in	r24, 0x08	; 8
  ee:	8f 7d       	andi	r24, 0xDF	; 223
  f0:	88 b9       	out	0x08, r24	; 8
}
if(PINA&(1<<PINA0)){
  f2:	00 9b       	sbis	0x00, 0	; 0
  f4:	0a c0       	rjmp	.+20     	; 0x10a <main+0x42>
	while(PINA&(1<<PINA0));
  f6:	00 99       	sbic	0x00, 0	; 0
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <main+0x2e>
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	95 e3       	ldi	r25, 0x35	; 53
  fe:	01 97       	sbiw	r24, 0x01	; 1
 100:	f1 f7       	brne	.-4      	; 0xfe <main+0x36>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x3c>
 104:	00 00       	nop
	_delay_ms(15);
	clockPuls();
 106:	0e 94 4a 00 	call	0x94	; 0x94 <clockPuls>
}

if(PINA&(1<<PINA1)){
 10a:	01 9b       	sbis	0x00, 1	; 0
 10c:	e9 cf       	rjmp	.-46     	; 0xe0 <main+0x18>
	while(PINA&(1<<PINA0));
 10e:	00 99       	sbic	0x00, 0	; 0
 110:	fe cf       	rjmp	.-4      	; 0x10e <main+0x46>
 112:	8f ef       	ldi	r24, 0xFF	; 255
 114:	95 e3       	ldi	r25, 0x35	; 53
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <main+0x4e>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <main+0x54>
 11c:	00 00       	nop
 11e:	e0 cf       	rjmp	.-64     	; 0xe0 <main+0x18>

00000120 <_exit>:
 120:	f8 94       	cli

00000122 <__stop_program>:
 122:	ff cf       	rjmp	.-2      	; 0x122 <__stop_program>
