
ServoControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aa1  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f3  00000000  00000000  00000d85  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003e1  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  0000195c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042f  00000000  00000000  000019cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000023c  00000000  00000000  00001dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00002037  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  8c:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <shiftInit>:
}

void shiftInit()
{
   //Make the Data(DS), Shift clock (SH_CP), Store Clock (ST_CP) lines output
  HC595_DDR|=((1<<HC595_SH_CP_POS)|(1<<HC595_ST_CP_POS)|(1<<HC595_DS_POS));
  94:	87 b1       	in	r24, 0x07	; 7
  96:	8c 61       	ori	r24, 0x1C	; 28
  98:	87 b9       	out	0x07, r24	; 7
  9a:	08 95       	ret

0000009c <shiftPulse>:

//Sends a clock pulse on SH_CP line
void shiftPulse()
{
   //Pulse the Shift Clock
   HC595_PORT|=(1<<HC595_SH_CP_POS);//HIGH
  9c:	88 b1       	in	r24, 0x08	; 8
  9e:	88 60       	ori	r24, 0x08	; 8
  a0:	88 b9       	out	0x08, r24	; 8
   HC595_PORT&=(~(1<<HC595_SH_CP_POS));//LOW
  a2:	88 b1       	in	r24, 0x08	; 8
  a4:	87 7f       	andi	r24, 0xF7	; 247
  a6:	88 b9       	out	0x08, r24	; 8
  a8:	08 95       	ret

000000aa <shiftLatch>:
}
//Sends a clock pulse on ST_CP line
void shiftLatch()
{
   //Pulse the Store Clock
   HC595_PORT|=(1<<HC595_ST_CP_POS);//HIGH
  aa:	88 b1       	in	r24, 0x08	; 8
  ac:	80 61       	ori	r24, 0x10	; 16
  ae:	88 b9       	out	0x08, r24	; 8
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	98 2f       	mov	r25, r24
  b4:	9a 95       	dec	r25
  b6:	f1 f7       	brne	.-4      	; 0xb4 <shiftLatch+0xa>
   _delay_loop_1(1);
   HC595_PORT&=(~(1<<HC595_ST_CP_POS));//LOW
  b8:	98 b1       	in	r25, 0x08	; 8
  ba:	9f 7e       	andi	r25, 0xEF	; 239
  bc:	98 b9       	out	0x08, r25	; 8
  be:	8a 95       	dec	r24
  c0:	f1 f7       	brne	.-4      	; 0xbe <shiftLatch+0x14>
  c2:	08 95       	ret

000000c4 <shiftWrite>:
   The byte is serially transfered to 74HC595
   and then latched. The byte is then available on
   output line Q0 to Q7 of the HC595 IC.
*/
void shiftWrite(uint8_t data)
{
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	d8 2f       	mov	r29, r24
   //Send each 8 bits serially
   //Order is MSB first
   for(uint8_t i=0;i<8;i++)
  ca:	c0 e0       	ldi	r28, 0x00	; 0
  cc:	0d c0       	rjmp	.+26     	; 0xe8 <shiftWrite+0x24>
   {
      //Output the data on DS line according to the
      //Value of MSB
      if(data & 0b10000000)
  ce:	dd 23       	and	r29, r29
  d0:	24 f4       	brge	.+8      	; 0xda <shiftWrite+0x16>
      {
         //MSB is 1 so output high
         HC595DataHigh();
  d2:	88 b1       	in	r24, 0x08	; 8
  d4:	84 60       	ori	r24, 0x04	; 4
  d6:	88 b9       	out	0x08, r24	; 8
  d8:	03 c0       	rjmp	.+6      	; 0xe0 <shiftWrite+0x1c>
      }
      else
      {
         //MSB is 0 so output high
         HC595DataLow();
  da:	88 b1       	in	r24, 0x08	; 8
  dc:	8b 7f       	andi	r24, 0xFB	; 251
  de:	88 b9       	out	0x08, r24	; 8
      }
      shiftPulse();  //Pulse the Clock line
  e0:	0e 94 4e 00 	call	0x9c	; 0x9c <shiftPulse>
      data=data<<1;  //Now bring next bit at MSB position
  e4:	dd 0f       	add	r29, r29
*/
void shiftWrite(uint8_t data)
{
   //Send each 8 bits serially
   //Order is MSB first
   for(uint8_t i=0;i<8;i++)
  e6:	cf 5f       	subi	r28, 0xFF	; 255
  e8:	c8 30       	cpi	r28, 0x08	; 8
  ea:	88 f3       	brcs	.-30     	; 0xce <shiftWrite+0xa>
      shiftPulse();  //Pulse the Clock line
      data=data<<1;  //Now bring next bit at MSB position
   }
   //Now all 8 bits have been transferred to shift register
   //Move them to output latch at one
   shiftLatch();
  ec:	0e 94 55 00 	call	0xaa	; 0xaa <shiftLatch>
  f0:	df 91       	pop	r29
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <main>:
	 
int main(void)
{
	//Configure TIMER1

	TCCR1A|=((1<<COM1A1)|(1<<COM1B1)|(1<<WGM11)); //NON Inverted PWM
  f6:	e0 e8       	ldi	r30, 0x80	; 128
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	80 81       	ld	r24, Z
  fc:	82 6a       	ori	r24, 0xA2	; 162
  fe:	80 83       	st	Z, r24

	TCCR1B|=((1<<WGM13)|(1<<WGM12)|(1<<CS11)|(1<<CS10)); //PRESCALER=1 MODE 14(FAST PWM)
 100:	e1 e8       	ldi	r30, 0x81	; 129
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	80 81       	ld	r24, Z
 106:	8b 61       	ori	r24, 0x1B	; 27
 108:	80 83       	st	Z, r24
	
	ICR1=1151; //fPWM=50Hz (Period = 20ms Standard).
 10a:	8f e7       	ldi	r24, 0x7F	; 127
 10c:	94 e0       	ldi	r25, 0x04	; 4
 10e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 112:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>

	DDRD|=((1<<DDRD4)|(1<<DDRD5)); //PWM Pins as Out
 116:	8a b1       	in	r24, 0x0a	; 10
 118:	80 63       	ori	r24, 0x30	; 48
 11a:	8a b9       	out	0x0a, r24	; 10
	
	DDRA = 0;
 11c:	11 b8       	out	0x01, r1	; 1
	 shiftInit();
 11e:	0e 94 4a 00 	call	0x94	; 0x94 <shiftInit>
    /* Replace with your application code */
    while (1) 
    {
		
		if(PINA&(1<<PINA0)){
 122:	00 9b       	sbis	0x00, 0	; 0
 124:	2c c0       	rjmp	.+88     	; 0x17e <main+0x88>
		while(PINA&(1<<PINA0));
 126:	00 99       	sbic	0x00, 0	; 0
 128:	fe cf       	rjmp	.-4      	; 0x126 <main+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	95 e3       	ldi	r25, 0x35	; 53
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <main+0x38>
 132:	00 c0       	rjmp	.+0      	; 0x134 <main+0x3e>
 134:	00 00       	nop
		_delay_ms(15);//dender knop
		shiftWrite(0b00000001);
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	0e 94 62 00 	call	0xc4	; 0xc4 <shiftWrite>
		OCR1A=140; //180 graden
 13e:	e8 e8       	ldi	r30, 0x88	; 136
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	8c e8       	ldi	r24, 0x8C	; 140
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	91 83       	std	Z+1, r25	; 0x01
 148:	80 83       	st	Z, r24
 14a:	9f ef       	ldi	r25, 0xFF	; 255
 14c:	2f e5       	ldi	r18, 0x5F	; 95
 14e:	83 e0       	ldi	r24, 0x03	; 3
 150:	91 50       	subi	r25, 0x01	; 1
 152:	20 40       	sbci	r18, 0x00	; 0
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <main+0x5a>
 158:	00 c0       	rjmp	.+0      	; 0x15a <main+0x64>
 15a:	00 00       	nop
		_delay_ms(300);
		OCR1A= 25; //0 graden
 15c:	89 e1       	ldi	r24, 0x19	; 25
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	91 83       	std	Z+1, r25	; 0x01
 162:	80 83       	st	Z, r24
 164:	9f ef       	ldi	r25, 0xFF	; 255
 166:	2f e9       	ldi	r18, 0x9F	; 159
 168:	85 e0       	ldi	r24, 0x05	; 5
 16a:	91 50       	subi	r25, 0x01	; 1
 16c:	20 40       	sbci	r18, 0x00	; 0
 16e:	80 40       	sbci	r24, 0x00	; 0
 170:	e1 f7       	brne	.-8      	; 0x16a <main+0x74>
 172:	00 c0       	rjmp	.+0      	; 0x174 <main+0x7e>
 174:	00 00       	nop
		_delay_ms(500);
		shiftWrite(0b00000000);
 176:	80 e0       	ldi	r24, 0x00	; 0
 178:	90 e0       	ldi	r25, 0x00	; 0
 17a:	0e 94 62 00 	call	0xc4	; 0xc4 <shiftWrite>
		}
		if(PINA&(1<<PINA1)){
 17e:	01 9b       	sbis	0x00, 1	; 0
 180:	d0 cf       	rjmp	.-96     	; 0x122 <main+0x2c>
			while(PINA&(1<<PINA1));
 182:	01 99       	sbic	0x00, 1	; 0
 184:	fe cf       	rjmp	.-4      	; 0x182 <main+0x8c>
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	95 e3       	ldi	r25, 0x35	; 53
 18a:	01 97       	sbiw	r24, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <main+0x94>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <main+0x9a>
 190:	00 00       	nop
			_delay_ms(15);//dender knop
		    shiftWrite(0b00000010);
 192:	82 e0       	ldi	r24, 0x02	; 2
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 62 00 	call	0xc4	; 0xc4 <shiftWrite>
			OCR1A=140; //180 graden
 19a:	e8 e8       	ldi	r30, 0x88	; 136
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	8c e8       	ldi	r24, 0x8C	; 140
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	91 83       	std	Z+1, r25	; 0x01
 1a4:	80 83       	st	Z, r24
 1a6:	9f ef       	ldi	r25, 0xFF	; 255
 1a8:	2f e5       	ldi	r18, 0x5F	; 95
 1aa:	83 e0       	ldi	r24, 0x03	; 3
 1ac:	91 50       	subi	r25, 0x01	; 1
 1ae:	20 40       	sbci	r18, 0x00	; 0
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	e1 f7       	brne	.-8      	; 0x1ac <main+0xb6>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <main+0xc0>
 1b6:	00 00       	nop
			_delay_ms(300);
			OCR1A= 25; //0 graden
 1b8:	89 e1       	ldi	r24, 0x19	; 25
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	91 83       	std	Z+1, r25	; 0x01
 1be:	80 83       	st	Z, r24
 1c0:	9f ef       	ldi	r25, 0xFF	; 255
 1c2:	2f e9       	ldi	r18, 0x9F	; 159
 1c4:	85 e0       	ldi	r24, 0x05	; 5
 1c6:	91 50       	subi	r25, 0x01	; 1
 1c8:	20 40       	sbci	r18, 0x00	; 0
 1ca:	80 40       	sbci	r24, 0x00	; 0
 1cc:	e1 f7       	brne	.-8      	; 0x1c6 <main+0xd0>
 1ce:	00 c0       	rjmp	.+0      	; 0x1d0 <main+0xda>
 1d0:	00 00       	nop
			_delay_ms(500);
			shiftWrite(0b00000000);
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	0e 94 62 00 	call	0xc4	; 0xc4 <shiftWrite>
 1da:	a3 cf       	rjmp	.-186    	; 0x122 <main+0x2c>

000001dc <_exit>:
 1dc:	f8 94       	cli

000001de <__stop_program>:
 1de:	ff cf       	rjmp	.-2      	; 0x1de <__stop_program>
