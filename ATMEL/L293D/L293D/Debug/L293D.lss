
L293D.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000011a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000080e  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000073b  00000000  00000000  00000a0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f1  00000000  00000000  00001149  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000143c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d2  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008c  00000000  00000000  00001832  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000018be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   8:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  10:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  14:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  18:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  1c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  20:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  24:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  28:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  2c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  30:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  34:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  3c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  40:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  44:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  48:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  4c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  50:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  54:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  58:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  5c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  60:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  64:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  68:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  6c:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  70:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  74:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>
  78:	0c 94 48 00 	jmp	0x90	; 0x90 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61
  88:	0e 94 4a 00 	call	0x94	; 0x94 <main>
  8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <_exit>

00000090 <__bad_interrupt>:
  90:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000094 <main>:
#define F_CPU 3686400
#include <util/delay.h>

int main(void)
{
	DDRC |= ((1<<DDRC0) | (1<<DDRC1));
  94:	87 b1       	in	r24, 0x07	; 7
  96:	83 60       	ori	r24, 0x03	; 3
  98:	87 b9       	out	0x07, r24	; 7
	
	DDRB |= (1 << DDB3); //OCR0A als uitgang instellen
  9a:	84 b1       	in	r24, 0x04	; 4
  9c:	88 60       	ori	r24, 0x08	; 8
  9e:	84 b9       	out	0x04, r24	; 4
	
	DDRA &= ~((1<<DDRA0)|(1<<DDRA7)); //PA0, PA7 als ingang instellen
  a0:	81 b1       	in	r24, 0x01	; 1
  a2:	8e 77       	andi	r24, 0x7E	; 126
  a4:	81 b9       	out	0x01, r24	; 1
	
	OCR0A = 64; //25% duty cycle
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	87 bd       	out	0x27, r24	; 39
	
	 TCCR0A |= (1 << COM0A1);  // Set OC0A op toggle on compare match
  aa:	84 b5       	in	r24, 0x24	; 36
  ac:	80 68       	ori	r24, 0x80	; 128
  ae:	84 bd       	out	0x24, r24	; 36
	  
	 TCCR0A |= ((1 << WGM01) | (1 << WGM00)); //Op fast PWM zetten
  b0:	84 b5       	in	r24, 0x24	; 36
  b2:	83 60       	ori	r24, 0x03	; 3
  b4:	84 bd       	out	0x24, r24	; 36
     TCCR0B &= ~(1<<WGM02);
  b6:	85 b5       	in	r24, 0x25	; 37
  b8:	87 7f       	andi	r24, 0xF7	; 247
  ba:	85 bd       	out	0x25, r24	; 37
	  
	 TCCR0B |= ((1 << CS00)|(1 << CS01)); //Prescaler van 64 gebruiken
  bc:	85 b5       	in	r24, 0x25	; 37
  be:	83 60       	ori	r24, 0x03	; 3
  c0:	85 bd       	out	0x25, r24	; 37
	 TCCR0B &= ~(1<<CS02);
  c2:	85 b5       	in	r24, 0x25	; 37
  c4:	8b 7f       	andi	r24, 0xFB	; 251
  c6:	85 bd       	out	0x25, r24	; 37
	  
    /* Replace with your application code */
    while (1) 
    {
		PORTC |= (1<<PORTC0);
  c8:	88 b1       	in	r24, 0x08	; 8
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	88 b9       	out	0x08, r24	; 8
		PORTC &= ~(1<<PORTC1);
  ce:	88 b1       	in	r24, 0x08	; 8
  d0:	8d 7f       	andi	r24, 0xFD	; 253
  d2:	88 b9       	out	0x08, r24	; 8
		
		
		if(PINA&(1<<PINA0) && OCR0A < 246){
  d4:	00 9b       	sbis	0x00, 0	; 0
  d6:	0e c0       	rjmp	.+28     	; 0xf4 <main+0x60>
  d8:	87 b5       	in	r24, 0x27	; 39
  da:	86 3f       	cpi	r24, 0xF6	; 246
  dc:	58 f4       	brcc	.+22     	; 0xf4 <main+0x60>
			while(PINA&(1<<PINA0));
  de:	00 99       	sbic	0x00, 0	; 0
  e0:	fe cf       	rjmp	.-4      	; 0xde <main+0x4a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	95 e3       	ldi	r25, 0x35	; 53
  e6:	01 97       	sbiw	r24, 0x01	; 1
  e8:	f1 f7       	brne	.-4      	; 0xe6 <main+0x52>
  ea:	00 c0       	rjmp	.+0      	; 0xec <main+0x58>
  ec:	00 00       	nop
			_delay_ms(15);
			OCR0A += 26; //10% laten stijgen
  ee:	87 b5       	in	r24, 0x27	; 39
  f0:	86 5e       	subi	r24, 0xE6	; 230
  f2:	87 bd       	out	0x27, r24	; 39
		}
		if(PINA&(1<<PINA7) && OCR0A > 12){
  f4:	07 9b       	sbis	0x00, 7	; 0
  f6:	e8 cf       	rjmp	.-48     	; 0xc8 <main+0x34>
  f8:	87 b5       	in	r24, 0x27	; 39
  fa:	8d 30       	cpi	r24, 0x0D	; 13
  fc:	28 f3       	brcs	.-54     	; 0xc8 <main+0x34>
			while(PINA&(1<<PINA7));
  fe:	07 99       	sbic	0x00, 7	; 0
 100:	fe cf       	rjmp	.-4      	; 0xfe <main+0x6a>
 102:	8f ef       	ldi	r24, 0xFF	; 255
 104:	95 e3       	ldi	r25, 0x35	; 53
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0x72>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x78>
 10c:	00 00       	nop
			_delay_ms(15);
			OCR0A -= 26; //10% laten dalen
 10e:	87 b5       	in	r24, 0x27	; 39
 110:	8a 51       	subi	r24, 0x1A	; 26
 112:	87 bd       	out	0x27, r24	; 39
 114:	d9 cf       	rjmp	.-78     	; 0xc8 <main+0x34>

00000116 <_exit>:
 116:	f8 94       	cli

00000118 <__stop_program>:
 118:	ff cf       	rjmp	.-2      	; 0x118 <__stop_program>
