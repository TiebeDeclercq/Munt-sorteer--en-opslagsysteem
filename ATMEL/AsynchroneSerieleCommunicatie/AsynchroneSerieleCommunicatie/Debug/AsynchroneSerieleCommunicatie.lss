
AsynchroneSerieleCommunicatie.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000001fa  0000026e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001fa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000936  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b6  00000000  00000000  00000c82  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034d  00000000  00000000  00001438  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001788  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000413  00000000  00000000  00001848  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000018c  00000000  00000000  00001c5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001de7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__vector_20>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  68:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  6c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  70:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  74:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  78:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d8 e0       	ldi	r29, 0x08	; 8
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	ea ef       	ldi	r30, 0xFA	; 250
  90:	f1 e0       	ldi	r31, 0x01	; 1
  92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0
  98:	ae 32       	cpi	r26, 0x2E	; 46
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>
  9e:	0e 94 8a 00 	call	0x114	; 0x114 <main>
  a2:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <_exit>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <USART_Init>:
			USART_Transmit_String("O10c11");
		}
    }
}
void USART_Init(void){
	UBRR0 = 23; //BAUD RATE VAN 9600
  aa:	87 e1       	ldi	r24, 0x17	; 23
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  b2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0C |= ((1<<UCSZ01)|(1<<UCSZ00)); //8 databits
  b6:	e2 ec       	ldi	r30, 0xC2	; 194
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	80 81       	ld	r24, Z
  bc:	86 60       	ori	r24, 0x06	; 6
  be:	80 83       	st	Z, r24
	UCSR0B |= ((1<<RXEN0)|(1<<TXEN0)); //8 databits
  c0:	e1 ec       	ldi	r30, 0xC1	; 193
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	88 61       	ori	r24, 0x18	; 24
  c8:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXCIE0); //Interrupt bij ontvangen
  ca:	80 81       	ld	r24, Z
  cc:	80 68       	ori	r24, 0x80	; 128
  ce:	80 83       	st	Z, r24
	// Enable global interrupts
	sei();
  d0:	78 94       	sei
  d2:	08 95       	ret

000000d4 <USART_Transmit_Char>:
}

void USART_Transmit_Char(unsigned char data){
	//Wacht tot de transmit buffer leeg is
	while(!(UCSR0A&(1<<UDRE0))); //Wachten tot UDRE0 == 1
  d4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  d8:	95 ff       	sbrs	r25, 5
  da:	fc cf       	rjmp	.-8      	; 0xd4 <USART_Transmit_Char>
	UDR0 = data;
  dc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  e0:	08 95       	ret

000000e2 <USART_Transmit_String>:
}

void USART_Transmit_String(char s[]){
  e2:	0f 93       	push	r16
  e4:	1f 93       	push	r17
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	8c 01       	movw	r16, r24
	int i = 0;
  ec:	c0 e0       	ldi	r28, 0x00	; 0
  ee:	d0 e0       	ldi	r29, 0x00	; 0
	while(i < 64){
  f0:	09 c0       	rjmp	.+18     	; 0x104 <USART_Transmit_String+0x22>
		if(s[i] == '\0') break;
  f2:	f8 01       	movw	r30, r16
  f4:	ec 0f       	add	r30, r28
  f6:	fd 1f       	adc	r31, r29
  f8:	80 81       	ld	r24, Z
  fa:	88 23       	and	r24, r24
  fc:	31 f0       	breq	.+12     	; 0x10a <USART_Transmit_String+0x28>
		USART_Transmit_Char(s[i++]);
  fe:	21 96       	adiw	r28, 0x01	; 1
 100:	0e 94 6a 00 	call	0xd4	; 0xd4 <USART_Transmit_Char>
	UDR0 = data;
}

void USART_Transmit_String(char s[]){
	int i = 0;
	while(i < 64){
 104:	c0 34       	cpi	r28, 0x40	; 64
 106:	d1 05       	cpc	r29, r1
 108:	a4 f3       	brlt	.-24     	; 0xf2 <USART_Transmit_String+0x10>
		if(s[i] == '\0') break;
		USART_Transmit_Char(s[i++]);
	}
}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	1f 91       	pop	r17
 110:	0f 91       	pop	r16
 112:	08 95       	ret

00000114 <main>:
#include <avr/interrupt.h>

int main(void)
{

	DDRC = 0xFF;
 114:	8f ef       	ldi	r24, 0xFF	; 255
 116:	87 b9       	out	0x07, r24	; 7
	DDRA = 0;
 118:	11 b8       	out	0x01, r1	; 1
	USART_Init();
 11a:	0e 94 55 00 	call	0xaa	; 0xaa <USART_Init>
	USART_Transmit_String("Verbonden");
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	91 e0       	ldi	r25, 0x01	; 1
 122:	0e 94 71 00 	call	0xe2	; 0xe2 <USART_Transmit_String>

    /* Replace with your application code */
    while (1) 
    {
		 if(PINA&(1<<PINA0)){
 126:	00 9b       	sbis	0x00, 0	; 0
 128:	06 c0       	rjmp	.+12     	; 0x136 <main+0x22>
			 while(PINA&(1<<PINA0));
 12a:	00 99       	sbic	0x00, 0	; 0
 12c:	fe cf       	rjmp	.-4      	; 0x12a <main+0x16>
			 USART_Transmit_String("G165");
 12e:	8a e0       	ldi	r24, 0x0A	; 10
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	0e 94 71 00 	call	0xe2	; 0xe2 <USART_Transmit_String>
		 }
		if(PINA&(1<<PINA1)){
 136:	01 9b       	sbis	0x00, 1	; 0
 138:	06 c0       	rjmp	.+12     	; 0x146 <main+0x32>
			while(PINA&(1<<PINA1));
 13a:	01 99       	sbic	0x00, 1	; 0
 13c:	fe cf       	rjmp	.-4      	; 0x13a <main+0x26>
			USART_Transmit_String("G235");
 13e:	8f e0       	ldi	r24, 0x0F	; 15
 140:	91 e0       	ldi	r25, 0x01	; 1
 142:	0e 94 71 00 	call	0xe2	; 0xe2 <USART_Transmit_String>
		}
		if(PINA&(1<<PINA2)){
 146:	02 9b       	sbis	0x00, 2	; 0
 148:	06 c0       	rjmp	.+12     	; 0x156 <main+0x42>
			while(PINA&(1<<PINA2));
 14a:	02 99       	sbic	0x00, 2	; 0
 14c:	fe cf       	rjmp	.-4      	; 0x14a <main+0x36>
			USART_Transmit_String("v");
 14e:	84 e1       	ldi	r24, 0x14	; 20
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	0e 94 71 00 	call	0xe2	; 0xe2 <USART_Transmit_String>
		}
		if(PINA&(1<<PINA3)){
 156:	03 9b       	sbis	0x00, 3	; 0
 158:	06 c0       	rjmp	.+12     	; 0x166 <main+0x52>
			while(PINA&(1<<PINA3));
 15a:	03 99       	sbic	0x00, 3	; 0
 15c:	fe cf       	rjmp	.-4      	; 0x15a <main+0x46>
			USART_Transmit_String("L0");
 15e:	86 e1       	ldi	r24, 0x16	; 22
 160:	91 e0       	ldi	r25, 0x01	; 1
 162:	0e 94 71 00 	call	0xe2	; 0xe2 <USART_Transmit_String>
		}
		if(PINA&(1<<PINA4)){
 166:	04 9b       	sbis	0x00, 4	; 0
 168:	06 c0       	rjmp	.+12     	; 0x176 <main+0x62>
			while(PINA&(1<<PINA4));
 16a:	04 99       	sbic	0x00, 4	; 0
 16c:	fe cf       	rjmp	.-4      	; 0x16a <main+0x56>
			USART_Transmit_String("L1");
 16e:	89 e1       	ldi	r24, 0x19	; 25
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	0e 94 71 00 	call	0xe2	; 0xe2 <USART_Transmit_String>
		}
		if(PINA&(1<<PINA5)){
 176:	05 9b       	sbis	0x00, 5	; 0
 178:	d6 cf       	rjmp	.-84     	; 0x126 <main+0x12>
			while(PINA&(1<<PINA5));
 17a:	05 99       	sbic	0x00, 5	; 0
 17c:	fe cf       	rjmp	.-4      	; 0x17a <main+0x66>
			USART_Transmit_String("O10c11");
 17e:	8c e1       	ldi	r24, 0x1C	; 28
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0e 94 71 00 	call	0xe2	; 0xe2 <USART_Transmit_String>
 186:	cf cf       	rjmp	.-98     	; 0x126 <main+0x12>

00000188 <__vector_20>:
	}
}



ISR(USART0_RX_vect) {
 188:	1f 92       	push	r1
 18a:	0f 92       	push	r0
 18c:	0f b6       	in	r0, 0x3f	; 63
 18e:	0f 92       	push	r0
 190:	11 24       	eor	r1, r1
 192:	2f 93       	push	r18
 194:	3f 93       	push	r19
 196:	4f 93       	push	r20
 198:	5f 93       	push	r21
 19a:	6f 93       	push	r22
 19c:	7f 93       	push	r23
 19e:	8f 93       	push	r24
 1a0:	9f 93       	push	r25
 1a2:	af 93       	push	r26
 1a4:	bf 93       	push	r27
 1a6:	ef 93       	push	r30
 1a8:	ff 93       	push	r31
	unsigned char receivedData = UDR0; // Read the received data
 1aa:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	if(receivedData == 'V'){
 1ae:	86 35       	cpi	r24, 0x56	; 86
 1b0:	41 f4       	brne	.+16     	; 0x1c2 <__vector_20+0x3a>
		PORTC |= (1<<PORTC5);
 1b2:	88 b1       	in	r24, 0x08	; 8
 1b4:	80 62       	ori	r24, 0x20	; 32
 1b6:	88 b9       	out	0x08, r24	; 8
		USART_Transmit_String("LED5");
 1b8:	83 e2       	ldi	r24, 0x23	; 35
 1ba:	91 e0       	ldi	r25, 0x01	; 1
 1bc:	0e 94 71 00 	call	0xe2	; 0xe2 <USART_Transmit_String>
 1c0:	09 c0       	rjmp	.+18     	; 0x1d4 <__vector_20+0x4c>
	}
	else if(receivedData == 'R'){
 1c2:	82 35       	cpi	r24, 0x52	; 82
 1c4:	39 f4       	brne	.+14     	; 0x1d4 <__vector_20+0x4c>
		PORTC |= (1<<PORTC3);
 1c6:	88 b1       	in	r24, 0x08	; 8
 1c8:	88 60       	ori	r24, 0x08	; 8
 1ca:	88 b9       	out	0x08, r24	; 8
		USART_Transmit_String("LED3");
 1cc:	88 e2       	ldi	r24, 0x28	; 40
 1ce:	91 e0       	ldi	r25, 0x01	; 1
 1d0:	0e 94 71 00 	call	0xe2	; 0xe2 <USART_Transmit_String>
	}
	
	// Process the received data here
}
 1d4:	ff 91       	pop	r31
 1d6:	ef 91       	pop	r30
 1d8:	bf 91       	pop	r27
 1da:	af 91       	pop	r26
 1dc:	9f 91       	pop	r25
 1de:	8f 91       	pop	r24
 1e0:	7f 91       	pop	r23
 1e2:	6f 91       	pop	r22
 1e4:	5f 91       	pop	r21
 1e6:	4f 91       	pop	r20
 1e8:	3f 91       	pop	r19
 1ea:	2f 91       	pop	r18
 1ec:	0f 90       	pop	r0
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	0f 90       	pop	r0
 1f2:	1f 90       	pop	r1
 1f4:	18 95       	reti

000001f6 <_exit>:
 1f6:	f8 94       	cli

000001f8 <__stop_program>:
 1f8:	ff cf       	rjmp	.-2      	; 0x1f8 <__stop_program>
